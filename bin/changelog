#!/usr/bin/env node
'use strict';

/*
 * This script generates the template a changelog by comparing a current version
 * with master. Run this, copy what's logged into the `CHANGELOG.md` and update
 * the top section based on the changes listed in "Community Contributions"
 *
 * Usage:
 *
 * bin/changelog
 */

var EOL = require('os').EOL;
var RSVP = require('rsvp');
var Promise = RSVP.Promise;
var GitHubApi = require('github');
var execSync = require('child_process').execSync;

var github = new GitHubApi({ version: '3.0.0' });
var compareCommits = RSVP.denodeify(github.repos.compareCommits);
var currentVersion = process.env.PRIOR_VERSION;
var head = process.env.HEAD || 'master';

compareCommits({
  user: 'emberjs',
  repo: 'data',
  base: currentVersion,
  head: head,
})
  .then(processPages)
  .then(console.log)
  .catch(function(err) {
    console.error(err);
  });

function getCommitMessage(commitInfo) {
  var message = commitInfo.commit.message;

  if (message.indexOf('cherry picked from commit') > -1) {
    var cherryPickRegex = /cherry picked from commit ([a-z0-9]+)/;
    var originalCommit = cherryPickRegex.exec(message)[1];

    try {
      // command from http://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
      message = execSync(
        'commit=$((git rev-list ' +
          originalCommit +
          '..origin/master --ancestry-path | cat -n; git rev-list ' +
          originalCommit +
          '..origin/master --first-parent | cat -n) | sort -k2 | uniq -f1 -d | sort -n | tail -1 | cut -f2) && git show --format="%s\n\n%b" $commit',
        { encoding: 'utf8' }
      );
    } catch (e) {}
  }

  return message;
}

var label_cache = Object.create(null);
function getLabels(str) {
  if (typeof str !== 'string') {
    return [];
  }
  if (label_cache[str] !== undefined) {
    return label_cache[str];
  }

  if (str[0] !== '[') {
    label_cache[str] = [];
    return label_cache[str];
  }

  let hasOpen = true;
  let labels = [];
  let label = '[';
  for (let i = 1; i < str.length; i++) {
    let c = str[i];
    if (hasOpen === true && c === ']') {
      label += c;
      labels.push(label);
      hasOpen = false;
      label = '';
    } else if (hasOpen === false && c === '[') {
      label = c;
      hasOpen = true;
    } else if (c === EOL) {
      hasOpen = false;
      label = '';
      break;
    } else if (hasOpen === true) {
      label += c;
    }
  }

  label_cache[str] = labels;
  return labels;
}

const MEANINGFUL_LABELS = ['FIX', 'BUGFIX', 'FEAT', 'FEATURE', 'DOCS', 'DOC'];
function hasLabelForChangelog(message) {
  let labels = getLabels(message);

  for (let i = 0; i < labels.length; i++) {
    let label = labels[i];

    for (let j = 0; j < MEANINGFUL_LABELS.length; j++) {
      if (label.indexOf(MEANINGFUL_LABELS[j]) !== -1) {
        return true;
      }
    }
  }
  return false;
}

function processPages(res) {
  var contributions = res.commits
    .filter(function(commitInfo) {
      var message = commitInfo.commit.message;
      var author = commitInfo.author || commitInfo.commit.author;
      if (
        author.type === 'Bot' || 
        author.login === 'dependabot[bot]' || 
        author.name === 'dependabot[bot]' ||
        author.login === 'dependabot-bot' ||
        author.name === 'dependabot-bot'
        ) {
        return false;
      }

      return (
        message.indexOf('Merge pull request #') > -1 ||
        message.indexOf('cherry picked from') > -1 ||
        message.match(/\(#\d+\)\n/) ||
        hasLabelForChangelog(message)
      );
    })
    .map(function(commitInfo) {
      var message = getCommitMessage(commitInfo);
      var labels = getLabels(message);
      var match = message.match(/#(\d+) from (.*)\//);
      var squashMatch = message.match(/#(\d+)\)\n/);
      var result = {
        sha: commitInfo.sha,
        labels,
      };

      if (match) {
        var numAndAuthor = match.slice(1, 3);

        result.number = numAndAuthor[0];
        result.title = message.split('\n\n')[1];
      } else if (squashMatch) {
        result.number = squashMatch[1];
        result.title = message.split('\n\n')[0];
      } else {
        result.title = message.split('\n\n')[0];
      }

      return result;
    })
    .sort(function(a, b) {
      return a.number > b.number;
    })
    .map(function(pr) {
      var title = pr.title;
      var link;
      if (pr.number) {
        link = '[#' + pr.number + ']' + '(https://github.com/emberjs/data/pull/' + pr.number + ')';
      } else {
        link =
          '[' + pr.sha.slice(0, 8) + '](https://github.com/emberjs/data/commit/' + pr.sha + ')';
      }

      return '- ' + link + ' ' + title;
    })
    .join('\n');

  if (github.hasNextPage(res)) {
    return github.getNextPage(res).then(function(nextPage) {
      contributions += processPages(nextPage);
    });
  } else {
    return RSVP.resolve(contributions);
  }
}
