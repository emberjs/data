{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2019-11-08T20:37:42.897Z",
        "id": "page_1",
        "title": "http://localhost:5000/",
        "pageTimings": {
          "onContentLoad": null,
          "onLoad": null
        }
      }
    ],
    "entries": [
      {
        "startedDateTime": "2019-11-08T20:37:42.896Z",
        "time": 2.6479999996809056,
        "request": {
          "method": "GET",
          "url": "http://localhost:5000/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36"
            },
            {
              "name": "Sec-Fetch-User",
              "value": "?1"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "io=wIu7CXtmPvSmDD1VAAAM; amplitude_id_5e201f0eac128f83637a72cc714578f0=eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0="
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "io",
              "value": "wIu7CXtmPvSmDD1VAAAM",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "amplitude_id_5e201f0eac128f83637a72cc714578f0",
              "value": "eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0=",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 857,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Date",
              "value": "Fri, 08 Nov 2019 20:37:42 +0000"
            },
            {
              "name": "Connection",
              "value": "close"
            },
            {
              "name": "Content-Type",
              "value": "text/html; charset=UTF-8"
            },
            {
              "name": "Content-Length",
              "value": "1176"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1176,
            "mimeType": "text/html",
            "compression": 0,
            "text": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>RelationshipPerformance</title>\n    <meta name=\"description\" content=\"\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\n    \n<meta name=\"relationship-performance-test-app/config/environment\" content=\"%7B%22modulePrefix%22%3A%22relationship-performance-test-app%22%2C%22environment%22%3A%22production%22%2C%22rootURL%22%3A%22%2F%22%2C%22locationType%22%3A%22auto%22%2C%22EmberENV%22%3A%7B%22FEATURES%22%3A%7B%7D%2C%22EXTEND_PROTOTYPES%22%3A%7B%22Date%22%3Afalse%7D%2C%22_JQUERY_INTEGRATION%22%3Afalse%7D%2C%22APP%22%3A%7B%22name%22%3A%22relationship-performance-test-app%22%2C%22version%22%3A%223.16.0-alpha.0%2Bec454410%22%7D%2C%22exportApplicationGlobal%22%3Afalse%7D\" />\n\n    <link integrity=\"\" rel=\"stylesheet\" href=\"/assets/vendor.css\" />\n    <link integrity=\"\" rel=\"stylesheet\" href=\"/assets/relationship-performance-test-app.css\" />\n\n    \n  </head>\n  <body>\n    \n\n    <script src=\"/assets/vendor.js\"></script>\n    <script src=\"/assets/relationship-performance-test-app.js\"></script>\n\n    \n  </body>\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": 161,
          "bodySize": 1176,
          "_transferSize": 1337
        },
        "cache": {},
        "timings": {
          "blocked": 1.5590000005672917,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.05900000000000005,
          "wait": 0.7399999991636723,
          "receive": 0.2899999999499414,
          "_blocked_queueing": 0.8560000005672919
        },
        "serverIPAddress": "[::1]",
        "_initiator": {
          "type": "other"
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "connection": "50967",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2019-11-08T20:37:42.914Z",
        "time": 3.937999999834574,
        "request": {
          "method": "GET",
          "url": "http://localhost:5000/assets/vendor.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Referer",
              "value": "http://localhost:5000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "io=wIu7CXtmPvSmDD1VAAAM; amplitude_id_5e201f0eac128f83637a72cc714578f0=eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0="
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "io",
              "value": "wIu7CXtmPvSmDD1VAAAM",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "amplitude_id_5e201f0eac128f83637a72cc714578f0",
              "value": "eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0=",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 730,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Date",
              "value": "Fri, 08 Nov 2019 20:37:42 +0000"
            },
            {
              "name": "Connection",
              "value": "close"
            },
            {
              "name": "Content-Type",
              "value": "text/css; charset=UTF-8"
            },
            {
              "name": "Content-Length",
              "value": "0"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/css",
            "compression": 0,
            "text": ""
          },
          "redirectURL": "",
          "headersSize": 157,
          "bodySize": 0,
          "_transferSize": 157
        },
        "cache": {},
        "timings": {
          "blocked": 1.8299999988757771,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.07900000000000001,
          "wait": 1.7669999995739198,
          "receive": 0.26200000138487667,
          "_blocked_queueing": 1.5709999988757772
        },
        "serverIPAddress": "[::1]",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:5000/",
          "lineNumber": 12
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "connection": "50969",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2019-11-08T20:37:42.914Z",
        "time": 4.8840000008769575,
        "request": {
          "method": "GET",
          "url": "http://localhost:5000/assets/relationship-performance-test-app.css",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/css,*/*;q=0.1"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Referer",
              "value": "http://localhost:5000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "io=wIu7CXtmPvSmDD1VAAAM; amplitude_id_5e201f0eac128f83637a72cc714578f0=eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0="
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "io",
              "value": "wIu7CXtmPvSmDD1VAAAM",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "amplitude_id_5e201f0eac128f83637a72cc714578f0",
              "value": "eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0=",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 757,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Date",
              "value": "Fri, 08 Nov 2019 20:37:42 +0000"
            },
            {
              "name": "Connection",
              "value": "close"
            },
            {
              "name": "Content-Type",
              "value": "text/css; charset=UTF-8"
            },
            {
              "name": "Content-Length",
              "value": "0"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "text/css",
            "compression": 0,
            "text": ""
          },
          "redirectURL": "",
          "headersSize": 157,
          "bodySize": 0,
          "_transferSize": 157
        },
        "cache": {},
        "timings": {
          "blocked": 3.0459999993679814,
          "dns": 0.008000000000000007,
          "ssl": -1,
          "connect": 0.942,
          "send": 0.2220000000000002,
          "wait": 0.4360000000433064,
          "receive": 0.2300000014656689,
          "_blocked_queueing": 2.861999999367981
        },
        "serverIPAddress": "[::1]",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:5000/",
          "lineNumber": 13
        },
        "_priority": "VeryHigh",
        "_resourceType": "stylesheet",
        "connection": "50983",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2019-11-08T20:37:42.915Z",
        "time": 99.79100000126788,
        "request": {
          "method": "GET",
          "url": "http://localhost:5000/assets/vendor.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Referer",
              "value": "http://localhost:5000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "io=wIu7CXtmPvSmDD1VAAAM; amplitude_id_5e201f0eac128f83637a72cc714578f0=eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0="
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "io",
              "value": "wIu7CXtmPvSmDD1VAAAM",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "amplitude_id_5e201f0eac128f83637a72cc714578f0",
              "value": "eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0=",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 714,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Date",
              "value": "Fri, 08 Nov 2019 20:37:42 +0000"
            },
            {
              "name": "Connection",
              "value": "close"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript"
            },
            {
              "name": "Content-Length",
              "value": "2818657"
            }
          ],
          "cookies": [],
          "content": {
            "size": 2818657,
            "mimeType": "application/javascript",
            "compression": 0,
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 162,
          "bodySize": 2818657,
          "_transferSize": 2818819
        },
        "cache": {},
        "timings": {
          "blocked": 4.185000000586151,
          "dns": 0.014000000000000012,
          "ssl": -1,
          "connect": 0.23699999999999988,
          "send": 0.601,
          "wait": 1.232999999989872,
          "receive": 93.52100000069186,
          "_blocked_queueing": 3.145000000586151
        },
        "serverIPAddress": "[::1]",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:5000/",
          "lineNumber": 20
        },
        "_priority": "High",
        "_resourceType": "script",
        "connection": "50991",
        "pageref": "page_1"
      },
      {
        "startedDateTime": "2019-11-08T20:37:42.915Z",
        "time": 5.945999999564956,
        "request": {
          "method": "GET",
          "url": "http://localhost:5000/assets/relationship-performance-test-app.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Referer",
              "value": "http://localhost:5000/"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "en-US,en;q=0.9"
            },
            {
              "name": "Cookie",
              "value": "io=wIu7CXtmPvSmDD1VAAAM; amplitude_id_5e201f0eac128f83637a72cc714578f0=eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0="
            }
          ],
          "queryString": [],
          "cookies": [
            {
              "name": "io",
              "value": "wIu7CXtmPvSmDD1VAAAM",
              "expires": null,
              "httpOnly": false,
              "secure": false
            },
            {
              "name": "amplitude_id_5e201f0eac128f83637a72cc714578f0",
              "value": "eyJkZXZpY2VJZCI6IjFjNDI0NTRkLTg5MjgtNDc2OC05MzE3LTJlZjFhZWIyOGEyY1IiLCJ1c2VySWQiOm51bGwsIm9wdE91dCI6ZmFsc2UsInNlc3Npb25JZCI6MTU3MjM4NjI4OTk2MiwibGFzdEV2ZW50VGltZSI6MTU3MjM4ODkwNjkxNiwiZXZlbnRJZCI6MTgyLCJpZGVudGlmeUlkIjo5NCwic2VxdWVuY2VOdW1iZXIiOjI3Nn0=",
              "expires": null,
              "httpOnly": false,
              "secure": false
            }
          ],
          "headersSize": 741,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Host",
              "value": "localhost:5000"
            },
            {
              "name": "Date",
              "value": "Fri, 08 Nov 2019 20:37:42 +0000"
            },
            {
              "name": "Connection",
              "value": "close"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript"
            },
            {
              "name": "Content-Length",
              "value": "22947"
            }
          ],
          "cookies": [],
          "content": {
            "size": 22947,
            "mimeType": "application/javascript",
            "compression": 0,
            "text": "'use strict';\n\n\n\n;define(\"relationship-performance-test-app/adapters/-json-api\", [\"exports\", \"@ember-data/adapter/json-api\"], function (_exports, _jsonApi) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _jsonApi.default;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/adapters/application\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\n  function _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\n  function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\n  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n  function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  var ApplicationMockAdapter =\n  /*#__PURE__*/\n  function (_EmberObject) {\n    _inherits(ApplicationMockAdapter, _EmberObject);\n\n    function ApplicationMockAdapter() {\n      _classCallCheck(this, ApplicationMockAdapter);\n\n      return _possibleConstructorReturn(this, _getPrototypeOf(ApplicationMockAdapter).apply(this, arguments));\n    }\n\n    _createClass(ApplicationMockAdapter, [{\n      key: \"findAll\",\n      value: function findAll() {\n        return Ember.RSVP.resolve(createCarsPayload(10000));\n      }\n    }, {\n      key: \"shouldReloadAll\",\n      value: function shouldReloadAll() {\n        return false;\n      }\n    }, {\n      key: \"shouldBackgroundReloadAll\",\n      value: function shouldBackgroundReloadAll() {\n        return false;\n      }\n    }]);\n\n    return ApplicationMockAdapter;\n  }(Ember.Object);\n\n  _exports.default = ApplicationMockAdapter;\n  var COLORS = ['red', 'white', 'black', 'pink', 'green', 'blue', 'yellow', 'orange', 'green', 'teal'];\n  var SIZES = ['square', 'rectangle', 'circle', 'oval', 'cube', 'small', 'medium', 'large', 'extra large'];\n  var TYPES = ['suv', 'sedan', 'minivan', 'electric', 'hybrid', 'truck', 'sport'];\n  var FIXTURE_ID = 0;\n\n  function getIndex(index, fixtures) {\n    var count = fixtures.length;\n    return index % count;\n  }\n\n  function assignToMany(resource, id) {\n    resource.relationships = resource.relationships || {};\n    var cars = resource.relationships.cars = resource.relationships.cars || {\n      data: []\n    };\n    cars.data.push({\n      type: 'car',\n      id: id\n    });\n  }\n\n  function getRelatedResource(fixtures, index, id) {\n    var resource = fixtures[getIndex(index, fixtures)];\n    assignToMany(resource, id);\n    return {\n      id: resource.id,\n      type: resource.type\n    };\n  }\n\n  function createCarsPayload(n) {\n    performance.mark('start-fixture-generation');\n    var colors = getColorResources();\n    var types = getTypeResources();\n    var sizes = getSizeResources();\n    var fixture = {\n      data: _toConsumableArray(new Array(n)).map(function (v, i) {\n        var id = \"urn:car:\".concat(FIXTURE_ID++);\n        return {\n          id: id,\n          type: 'car',\n          attributes: {},\n          relationships: {\n            type: {\n              data: getRelatedResource(types, i, id)\n            },\n            size: {\n              data: getRelatedResource(sizes, i, id)\n            },\n            colors: {\n              data: [getRelatedResource(colors, i, id), getRelatedResource(colors, i + 1, id), getRelatedResource(colors, i + 2, id)]\n            }\n          }\n        };\n      }),\n      included: [].concat(colors, types, sizes)\n    };\n    performance.mark('end-fixture-generation');\n    return fixture;\n  }\n\n  function getColorResources() {\n    return COLORS.map(function (name) {\n      return createJsonApiResource(\"urn:color:\".concat(FIXTURE_ID++), 'color', {\n        name: name\n      });\n    });\n  }\n\n  function getSizeResources() {\n    return SIZES.map(function (name) {\n      return createJsonApiResource(\"urn:size:\".concat(FIXTURE_ID++), 'size', {\n        name: name\n      });\n    });\n  }\n\n  function getTypeResources() {\n    return TYPES.map(function (name) {\n      return createJsonApiResource(\"urn:type:\".concat(FIXTURE_ID++), 'type', {\n        name: name\n      });\n    });\n  }\n\n  function createJsonApiResource(id, type, attributes) {\n    return {\n      id: id,\n      type: type,\n      attributes: attributes\n    };\n  }\n});\n;define(\"relationship-performance-test-app/app\", [\"exports\", \"relationship-performance-test-app/resolver\", \"ember-load-initializers\", \"relationship-performance-test-app/config/environment\"], function (_exports, _resolver, _emberLoadInitializers, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var App = Ember.Application.extend({\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix,\n    Resolver: _resolver.default\n  });\n  (0, _emberLoadInitializers.default)(App, _environment.default.modulePrefix);\n  var _default = App;\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/data-adapter\", [\"exports\", \"@ember-data/debug\"], function (_exports, _debug) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _debug.default;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/helpers/app-version\", [\"exports\", \"relationship-performance-test-app/config/environment\", \"ember-cli-app-version/utils/regexp\"], function (_exports, _environment, _regexp) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.appVersion = appVersion;\n  _exports.default = void 0;\n\n  function appVersion(_) {\n    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var version = _environment.default.APP.version; // e.g. 1.0.0-alpha.1+4jds75hf\n    // Allow use of 'hideSha' and 'hideVersion' For backwards compatibility\n\n    var versionOnly = hash.versionOnly || hash.hideSha;\n    var shaOnly = hash.shaOnly || hash.hideVersion;\n    var match = null;\n\n    if (versionOnly) {\n      if (hash.showExtended) {\n        match = version.match(_regexp.versionExtendedRegExp); // 1.0.0-alpha.1\n      } // Fallback to just version\n\n\n      if (!match) {\n        match = version.match(_regexp.versionRegExp); // 1.0.0\n      }\n    }\n\n    if (shaOnly) {\n      match = version.match(_regexp.shaRegExp); // 4jds75hf\n    }\n\n    return match ? match[0] : version;\n  }\n\n  var _default = Ember.Helper.helper(appVersion);\n\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/helpers/pluralize\", [\"exports\", \"ember-inflector/lib/helpers/pluralize\"], function (_exports, _pluralize) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var _default = _pluralize.default;\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/helpers/singularize\", [\"exports\", \"ember-inflector/lib/helpers/singularize\"], function (_exports, _singularize) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var _default = _singularize.default;\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/initializers/app-version\", [\"exports\", \"ember-cli-app-version/initializer-factory\", \"relationship-performance-test-app/config/environment\"], function (_exports, _initializerFactory, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var name, version;\n\n  if (_environment.default.APP) {\n    name = _environment.default.APP.name;\n    version = _environment.default.APP.version;\n  }\n\n  var _default = {\n    name: 'App Version',\n    initialize: (0, _initializerFactory.default)(name, version)\n  };\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/initializers/container-debug-adapter\", [\"exports\", \"ember-resolver/resolvers/classic/container-debug-adapter\"], function (_exports, _containerDebugAdapter) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var _default = {\n    name: 'container-debug-adapter',\n    initialize: function initialize() {\n      var app = arguments[1] || arguments[0];\n      app.register('container-debug-adapter:main', _containerDebugAdapter.default);\n      app.inject('container-debug-adapter:main', 'namespace', 'application:main');\n    }\n  };\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/initializers/ember-data-data-adapter\", [\"exports\", \"@ember-data/debug/setup\"], function (_exports, _setup) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _setup.default;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/initializers/ember-data\", [\"exports\", \"ember-data/setup-container\", \"ember-data\"], function (_exports, _setupContainer, _emberData) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  /*\n    This code initializes EmberData in an Ember application.\n  \n    It ensures that the `store` service is automatically injected\n    as the `store` property on all routes and controllers.\n  */\n  var _default = {\n    name: 'ember-data',\n    initialize: _setupContainer.default\n  };\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/initializers/export-application-global\", [\"exports\", \"relationship-performance-test-app/config/environment\"], function (_exports, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.initialize = initialize;\n  _exports.default = void 0;\n\n  function initialize() {\n    var application = arguments[1] || arguments[0];\n\n    if (_environment.default.exportApplicationGlobal !== false) {\n      var theGlobal;\n\n      if (typeof window !== 'undefined') {\n        theGlobal = window;\n      } else if (typeof global !== 'undefined') {\n        theGlobal = global;\n      } else if (typeof self !== 'undefined') {\n        theGlobal = self;\n      } else {\n        // no reasonable global, just bail\n        return;\n      }\n\n      var value = _environment.default.exportApplicationGlobal;\n      var globalName;\n\n      if (typeof value === 'string') {\n        globalName = value;\n      } else {\n        globalName = Ember.String.classify(_environment.default.modulePrefix);\n      }\n\n      if (!theGlobal[globalName]) {\n        theGlobal[globalName] = application;\n        application.reopen({\n          willDestroy: function willDestroy() {\n            this._super.apply(this, arguments);\n\n            delete theGlobal[globalName];\n          }\n        });\n      }\n    }\n  }\n\n  var _default = {\n    name: 'export-application-global',\n    initialize: initialize\n  };\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/instance-initializers/ember-data\", [\"exports\", \"ember-data/initialize-store-service\"], function (_exports, _initializeStoreService) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var _default = {\n    name: 'ember-data',\n    initialize: _initializeStoreService.default\n  };\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/models/car\", [\"exports\", \"ember-data\"], function (_exports, _emberData) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var Model = _emberData.default.Model,\n      belongsTo = _emberData.default.belongsTo,\n      hasMany = _emberData.default.hasMany;\n\n  var _default = Model.extend({\n    type: belongsTo('type', {\n      async: false\n    }),\n    size: belongsTo('size', {\n      async: false\n    }),\n    colors: hasMany('color', {\n      async: false\n    })\n  });\n\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/models/color\", [\"exports\", \"ember-data\"], function (_exports, _emberData) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var Model = _emberData.default.Model,\n      attr = _emberData.default.attr,\n      hasMany = _emberData.default.hasMany;\n\n  var _default = Model.extend({\n    name: attr('string'),\n    cars: hasMany('car', {\n      async: false\n    })\n  });\n\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/models/size\", [\"exports\", \"ember-data\"], function (_exports, _emberData) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var Model = _emberData.default.Model,\n      attr = _emberData.default.attr,\n      hasMany = _emberData.default.hasMany;\n\n  var _default = Model.extend({\n    name: attr('string'),\n    cars: hasMany('car', {\n      async: false\n    })\n  });\n\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/models/type\", [\"exports\", \"ember-data\"], function (_exports, _emberData) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var Model = _emberData.default.Model,\n      attr = _emberData.default.attr,\n      hasMany = _emberData.default.hasMany;\n\n  var _default = Model.extend({\n    name: attr('string'),\n    cars: hasMany('car', {\n      async: false\n    })\n  });\n\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/resolver\", [\"exports\", \"ember-resolver\"], function (_exports, _emberResolver) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var _default = _emberResolver.default;\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/router\", [\"exports\", \"relationship-performance-test-app/config/environment\"], function (_exports, _environment) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n  var Router = Ember.Router.extend({\n    location: _environment.default.locationType,\n    rootURL: _environment.default.rootURL\n  });\n  Router.map(function () {});\n  var _default = Router;\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/routes/application\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  var _default = Ember.Route.extend({\n    model: function model() {\n      performance.mark('start-find-all');\n      return this.store.findAll('car', {\n        reload: true\n      }).then(function (cars) {\n        performance.mark('start-outer-materialization');\n        var flattened = cars.map(function (car) {\n          // enforce materialization of our relationships\n          return {\n            name: car.id,\n            size: car.size.name,\n            type: car.type.name,\n            colors: car.colors.map(function (color) {\n              return color.name;\n            })\n          };\n        });\n        performance.mark('stop-outer-materialization');\n        performance.mark('end-find-all');\n        return flattened;\n      });\n    },\n    afterModel: function afterModel() {\n      if (document.location.href.indexOf('?tracerbench=true') !== -1) {\n        document.location.href = 'about:blank';\n      }\n    }\n  });\n\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/serializers/-default\", [\"exports\", \"@ember-data/serializer/json\"], function (_exports, _json) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _json.default;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/serializers/-json-api\", [\"exports\", \"@ember-data/serializer/json-api\"], function (_exports, _jsonApi) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _jsonApi.default;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/serializers/-rest\", [\"exports\", \"@ember-data/serializer/rest\"], function (_exports, _rest) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _rest.default;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/serializers/application\", [\"exports\", \"ember-data\"], function (_exports, _emberData) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  var _default = _emberData.default.JSONAPISerializer.extend({\n    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload) {\n      return payload;\n    }\n  });\n\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/services/store\", [\"exports\", \"ember-data/store\"], function (_exports, _store) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _store.default;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/templates/application\", [\"exports\"], function (_exports) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = void 0;\n\n  var _default = Ember.HTMLBars.template({\n    \"id\": \"6nqMC1Ym\",\n    \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[],\\\"hasEval\\\":false}\",\n    \"meta\": {\n      \"moduleName\": \"relationship-performance-test-app/templates/application.hbs\"\n    }\n  });\n\n  _exports.default = _default;\n});\n;define(\"relationship-performance-test-app/transforms/boolean\", [\"exports\", \"@ember-data/serializer/-private\"], function (_exports, _private) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _private.BooleanTransform;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/transforms/date\", [\"exports\", \"@ember-data/serializer/-private\"], function (_exports, _private) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _private.DateTransform;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/transforms/number\", [\"exports\", \"@ember-data/serializer/-private\"], function (_exports, _private) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _private.NumberTransform;\n    }\n  });\n});\n;define(\"relationship-performance-test-app/transforms/string\", [\"exports\", \"@ember-data/serializer/-private\"], function (_exports, _private) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(_exports, \"default\", {\n    enumerable: true,\n    get: function get() {\n      return _private.StringTransform;\n    }\n  });\n});\n;\n\n;define('relationship-performance-test-app/config/environment', [], function() {\n  var prefix = 'relationship-performance-test-app';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n\n;\n          if (!runningTests) {\n            require(\"relationship-performance-test-app/app\")[\"default\"].create({\"name\":\"relationship-performance-test-app\",\"version\":\"3.16.0-alpha.0+ec454410\"});\n          }\n        \n"
          },
          "redirectURL": "",
          "headersSize": 160,
          "bodySize": 22947,
          "_transferSize": 23107
        },
        "cache": {},
        "timings": {
          "blocked": 4.667000000505941,
          "dns": 0.010000000000000009,
          "ssl": -1,
          "connect": 0.18300000000000005,
          "send": 0.09099999999999997,
          "wait": 0.6029999991392252,
          "receive": 0.39199999991978984,
          "_blocked_queueing": 3.537000000505941
        },
        "serverIPAddress": "[::1]",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:5000/",
          "lineNumber": 21
        },
        "_priority": "High",
        "_resourceType": "script",
        "connection": "50995",
        "pageref": "page_1"
      }
    ]
  }
}