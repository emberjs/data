diff --git a/addon-test-support/@ember/test-helpers/build-owner.js b/addon-test-support/@ember/test-helpers/build-owner.js
index f5581db0b593755de4aac0741a75ca947325e152..d7a978bd5e9aa42b26a0181b50958a0dc903a9c6 100644
--- a/addon-test-support/@ember/test-helpers/build-owner.js
+++ b/addon-test-support/@ember/test-helpers/build-owner.js
@@ -18,13 +18,17 @@ import legacyBuildRegistry from './-internal/build-registry';
   @param {Ember.Resolver} [resolver] the resolver to use to back a "mock owner"
   @returns {Promise<Ember.ApplicationInstance>} a promise resolving to the generated "owner"
 */
-export default function buildOwner(application, resolver) {
+export default function buildOwner(application, resolver, options) {
   if (application) {
     // @ts-ignore: this type is correct and will check against Ember 4.12 or 5.1
     // or later. However, the first round of preview types in Ember 4.8 does not
     // include the `visit` API (it was missing for many years!) and therefore
     // there is no way to make this assignable accross all supported versions.
-    return application.boot().then(app => app.buildInstance().boot());
+    const appBoot = application.boot();
+    return appBoot.then(app => {
+      const instance = app.buildInstance(options);
+      return instance.boot(options);
+    });
   }
   if (!resolver) {
     throw new Error('You must set up the ember-test-helpers environment with either `setResolver` or `setApplication` before running any tests.');
diff --git a/addon-test-support/@ember/test-helpers/build-owner.ts b/addon-test-support/@ember/test-helpers/build-owner.ts
index 4123927cf9953a31dc6f2a476a3919a3511c4301..e9869859c612cd88e2b3ab5f1d2dbbdbbfc3e00e 100644
--- a/addon-test-support/@ember/test-helpers/build-owner.ts
+++ b/addon-test-support/@ember/test-helpers/build-owner.ts
@@ -46,7 +46,7 @@ export default function buildOwner(
     // or later. However, the first round of preview types in Ember 4.8 does not
     // include the `visit` API (it was missing for many years!) and therefore
     // there is no way to make this assignable accross all supported versions.
-    return application.boot().then((app) => app.buildInstance().boot());
+    return application.boot(options).then((app) => app.buildInstance().boot());
   }
 
   if (!resolver) {
diff --git a/addon-test-support/@ember/test-helpers/index.js b/addon-test-support/@ember/test-helpers/index.js
index 51b66ee9c663de864efa3822db874e7f317a0b31..13d50d4dad24406999985bc699cf0dd92e371120 100644
--- a/addon-test-support/@ember/test-helpers/index.js
+++ b/addon-test-support/@ember/test-helpers/index.js
@@ -3,7 +3,7 @@ export { getApplication, setApplication } from './application';
 export { default as hasEmberVersion } from './has-ember-version';
 export { default as setupContext, getContext, setContext, unsetContext, pauseTest, resumeTest, getDeprecations, getDeprecationsDuringCallback, getWarnings, getWarningsDuringCallback } from './setup-context';
 export { default as teardownContext } from './teardown-context';
-export { default as setupRenderingContext, render, clearRender } from './setup-rendering-context';
+export { default as setupRenderingContext, hasCalledSetupRenderingContext, render, clearRender } from './setup-rendering-context';
 export { default as rerender } from './rerender';
 export { default as setupApplicationContext, visit, currentRouteName, currentURL } from './setup-application-context';
 export { default as settled, isSettled, getSettledState } from './settled';
diff --git a/addon-test-support/@ember/test-helpers/setup-context.js b/addon-test-support/@ember/test-helpers/setup-context.js
index c68ef11c92225725c8e8eb2b824c787c5644ec8b..84ae96cb4c9aa89d480698e20212df7b6d8331ef 100644
--- a/addon-test-support/@ember/test-helpers/setup-context.js
+++ b/addon-test-support/@ember/test-helpers/setup-context.js
@@ -319,7 +319,8 @@ export default function setupContext(base, options = {}) {
     return;
   }).then(() => {
     let {
-      resolver
+      resolver,
+      rootElement
     } = options;
 
     // This handles precedence, specifying a specific option of
@@ -329,9 +330,9 @@ export default function setupContext(base, options = {}) {
     // At some later time this can be extended to support specifying a custom
     // engine or application...
     if (resolver) {
-      return buildOwner(null, resolver);
+      return buildOwner(null, resolver, { rootElement });
     }
-    return buildOwner(getApplication(), getResolver());
+    return buildOwner(getApplication(), getResolver(), { rootElement });
   }).then(owner => {
     associateDestroyableChild(context, owner);
     Object.defineProperty(context, 'owner', {
diff --git a/addon-test-support/@ember/test-helpers/setup-rendering-context.js b/addon-test-support/@ember/test-helpers/setup-rendering-context.js
index fe5b40b8d2eff73de9c5b5ad18f8c0c70e264b6b..b821daa5929dcc6c05a51f7c98185fd0af9b549e 100644
--- a/addon-test-support/@ember/test-helpers/setup-rendering-context.js
+++ b/addon-test-support/@ember/test-helpers/setup-rendering-context.js
@@ -15,7 +15,8 @@ import { ComponentRenderMap, SetUsage } from './setup-context';
 const OUTLET_TEMPLATE = hbs`{{outlet}}`;
 const EMPTY_TEMPLATE = hbs``;
 const INVOKE_PROVIDED_COMPONENT = hbs`<this.ProvidedComponent />`;
-const hasCalledSetupRenderingContext = Symbol();
+export const hasCalledSetupRenderingContext = Symbol('hasCalledSetupRenderingContext');
+
 //  Isolates the notion of transforming a TextContext into a RenderingTestContext.
 // eslint-disable-next-line require-jsdoc
 function prepare(context) {
diff --git a/dist-types/index.d.ts b/dist-types/index.d.ts
index fe2bd64a876f41b9d270e49ca8c8d53b5d3000b6..54a5b34130063c22f1bb70bc02a0569892415e8b 100644
--- a/dist-types/index.d.ts
+++ b/dist-types/index.d.ts
@@ -6,7 +6,7 @@ export type { BaseContext, DeprecationFailure, TestContext, Warning, SetupContex
 export { default as setupContext, getContext, setContext, unsetContext, pauseTest, resumeTest, getDeprecations, getDeprecationsDuringCallback, getWarnings, getWarningsDuringCallback, } from './setup-context';
 export { default as teardownContext } from './teardown-context';
 export type { TeardownContextOptions } from './teardown-context';
-export { default as setupRenderingContext, render, clearRender, } from './setup-rendering-context';
+export { default as setupRenderingContext, render, clearRender, hasCalledSetupRenderingContext } from './setup-rendering-context';
 export type { RenderingTestContext } from './setup-rendering-context';
 export { default as rerender } from './rerender';
 export { default as setupApplicationContext, visit, currentRouteName, currentURL, } from './setup-application-context';
diff --git a/dist-types/setup-rendering-context.d.ts b/dist-types/setup-rendering-context.d.ts
index bc748d27e22905a061a9ab683255bbf0172c0c62..f7d0e81b838ecb62718312aaff15b078a6d22ebe 100644
--- a/dist-types/setup-rendering-context.d.ts
+++ b/dist-types/setup-rendering-context.d.ts
@@ -1,6 +1,6 @@
 import { BaseContext, TestContext } from './setup-context';
 import { Owner } from './build-owner';
-declare const hasCalledSetupRenderingContext: unique symbol;
+export declare const hasCalledSetupRenderingContext: unique symbol;
 export interface RenderingTestContext extends TestContext {
     element: Element | Document;
     [hasCalledSetupRenderingContext]?: true;