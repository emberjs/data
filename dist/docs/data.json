{
    "project": {},
    "files": {
        "packages/activemodel-adapter/lib/system/active_model_adapter.js": {
            "name": "packages/activemodel-adapter/lib/system/active_model_adapter.js",
            "modules": {},
            "classes": {
                "DS.ActiveModelAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/activemodel-adapter/lib/system/active_model_serializer.js": {
            "name": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "modules": {},
            "classes": {
                "DS.ActiveModelSerializer": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/adapters/fixture_adapter.js": {
            "name": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "modules": {},
            "classes": {
                "DS.FixtureAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/adapters/rest_adapter.js": {
            "name": "packages/ember-data/lib/adapters/rest_adapter.js",
            "modules": {},
            "classes": {
                "DS.RESTAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/ext/date.js": {
            "name": "packages/ember-data/lib/ext/date.js",
            "modules": {},
            "classes": {
                "Ember.Date": 1
            },
            "fors": {},
            "namespaces": {
                "Ember": 1
            }
        },
        "packages/ember-data/lib/initializers/data_adapter.js": {
            "name": "packages/ember-data/lib/initializers/data_adapter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/initializers/store.js": {
            "name": "packages/ember-data/lib/initializers/store.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/initializers/store_injections.js": {
            "name": "packages/ember-data/lib/initializers/store_injections.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/initializers/transforms.js": {
            "name": "packages/ember-data/lib/initializers/transforms.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/serializers/embedded_records_mixin.js": {
            "name": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "modules": {},
            "classes": {
                "DS.EmbeddedRecordsMixin": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/serializers/json_serializer.js": {
            "name": "packages/ember-data/lib/serializers/json_serializer.js",
            "modules": {},
            "classes": {
                "DS.JSONSerializer": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/serializers/rest_serializer.js": {
            "name": "packages/ember-data/lib/serializers/rest_serializer.js",
            "modules": {},
            "classes": {
                "DS.RESTSerializer": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/debug/debug_adapter.js": {
            "name": "packages/ember-data/lib/system/debug/debug_adapter.js",
            "modules": {},
            "classes": {
                "DS.DebugAdapter": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/debug/debug_info.js": {
            "name": "packages/ember-data/lib/system/debug/debug_info.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS.Model": 1
            },
            "namespaces": {}
        },
        "packages/ember-data/lib/system/model/attributes.js": {
            "name": "packages/ember-data/lib/system/model/attributes.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS": 1
            },
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/model/errors.js": {
            "name": "packages/ember-data/lib/system/model/errors.js",
            "modules": {},
            "classes": {
                "DS.Errors": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/model/model.js": {
            "name": "packages/ember-data/lib/system/model/model.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/model/states.js": {
            "name": "packages/ember-data/lib/system/model/states.js",
            "modules": {},
            "classes": {
                "DS.RootState": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/record_arrays/adapter_populated_record_array.js": {
            "name": "packages/ember-data/lib/system/record_arrays/adapter_populated_record_array.js",
            "modules": {},
            "classes": {
                "DS.AdapterPopulatedRecordArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/record_arrays/filtered_record_array.js": {
            "name": "packages/ember-data/lib/system/record_arrays/filtered_record_array.js",
            "modules": {},
            "classes": {
                "DS.FilteredRecordArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/record_arrays/many_array.js": {
            "name": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "modules": {},
            "classes": {
                "DS.ManyArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/record_arrays/record_array.js": {
            "name": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "modules": {},
            "classes": {
                "DS.RecordArray": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/relationships/belongs_to.js": {
            "name": "packages/ember-data/lib/system/relationships/belongs_to.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS": 1
            },
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/relationships/ext.js": {
            "name": "packages/ember-data/lib/system/relationships/ext.js",
            "modules": {},
            "classes": {
                "DS.Model": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/relationships/has_many.js": {
            "name": "packages/ember-data/lib/system/relationships/has_many.js",
            "modules": {},
            "classes": {},
            "fors": {
                "DS": 1
            },
            "namespaces": {}
        },
        "packages/ember-data/lib/system/adapter.js": {
            "name": "packages/ember-data/lib/system/adapter.js",
            "modules": {},
            "classes": {
                "DS.InvalidError": 1,
                "DS.Adapter": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/container_proxy.js": {
            "name": "packages/ember-data/lib/system/container_proxy.js",
            "modules": {},
            "classes": {
                "DS.ContainerProxy": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/debug.js": {
            "name": "packages/ember-data/lib/system/debug.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/system/map.js": {
            "name": "packages/ember-data/lib/system/map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/system/model.js": {
            "name": "packages/ember-data/lib/system/model.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/system/promise_proxies.js": {
            "name": "packages/ember-data/lib/system/promise_proxies.js",
            "modules": {},
            "classes": {
                "DS.PromiseArray": 1,
                "DS.PromiseObject": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/record_array_manager.js": {
            "name": "packages/ember-data/lib/system/record_array_manager.js",
            "modules": {},
            "classes": {
                "DS.RecordArrayManager": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/system/record_arrays.js": {
            "name": "packages/ember-data/lib/system/record_arrays.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/system/relationships.js": {
            "name": "packages/ember-data/lib/system/relationships.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/system/store.js": {
            "name": "packages/ember-data/lib/system/store.js",
            "modules": {},
            "classes": {
                "DS.Store": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/transforms/base.js": {
            "name": "packages/ember-data/lib/transforms/base.js",
            "modules": {},
            "classes": {
                "DS.Transform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/transforms/boolean.js": {
            "name": "packages/ember-data/lib/transforms/boolean.js",
            "modules": {},
            "classes": {
                "DS.BooleanTransform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/transforms/date.js": {
            "name": "packages/ember-data/lib/transforms/date.js",
            "modules": {},
            "classes": {
                "DS.DateTransform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/transforms/number.js": {
            "name": "packages/ember-data/lib/transforms/number.js",
            "modules": {},
            "classes": {
                "DS.NumberTransform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/transforms/string.js": {
            "name": "packages/ember-data/lib/transforms/string.js",
            "modules": {},
            "classes": {
                "DS.StringTransform": 1
            },
            "fors": {},
            "namespaces": {
                "DS": 1
            }
        },
        "packages/ember-data/lib/adapters.js": {
            "name": "packages/ember-data/lib/adapters.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/core.js": {
            "name": "packages/ember-data/lib/core.js",
            "modules": {},
            "classes": {
                "DS": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/ember-initializer.js": {
            "name": "packages/ember-data/lib/ember-initializer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "packages/ember-data/lib/main.js": {
            "name": "packages/ember-data/lib/main.js",
            "modules": {
                "ember-data": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "ember-data": {
            "name": "ember-data",
            "submodules": {},
            "classes": {
                "DS.ActiveModelAdapter": 1,
                "DS.ActiveModelSerializer": 1,
                "DS.FixtureAdapter": 1,
                "DS.RESTAdapter": 1,
                "Ember.Date": 1,
                "DS.EmbeddedRecordsMixin": 1,
                "DS.JSONSerializer": 1,
                "DS.RESTSerializer": 1,
                "DS.DebugAdapter": 1,
                "DS.Model": 1,
                "DS": 1,
                "DS.Errors": 1,
                "DS.RootState": 1,
                "DS.AdapterPopulatedRecordArray": 1,
                "DS.FilteredRecordArray": 1,
                "DS.ManyArray": 1,
                "DS.RecordArray": 1,
                "DS.InvalidError": 1,
                "DS.Adapter": 1,
                "DS.ContainerProxy": 1,
                "DS.PromiseArray": 1,
                "DS.PromiseObject": 1,
                "DS.RecordArrayManager": 1,
                "DS.Store": 1,
                "DS.Transform": 1,
                "DS.BooleanTransform": 1,
                "DS.DateTransform": 1,
                "DS.NumberTransform": 1,
                "DS.StringTransform": 1
            },
            "fors": {
                "DS.Model": 1,
                "DS": 1
            },
            "namespaces": {
                "DS": 1,
                "Ember": 1
            },
            "tag": "main",
            "file": "packages/ember-data/lib/transforms/string.js",
            "line": 4,
            "description": "Ember Data",
            "itemtype": "main"
        }
    },
    "classes": {
        "DS.ActiveModelAdapter": {
            "name": "DS.ActiveModelAdapter",
            "shortname": "DS.ActiveModelAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/activemodel-adapter/lib/system/active_model_adapter.js",
            "line": 13,
            "description": "The ActiveModelAdapter is a subclass of the RESTAdapter designed to integrate\nwith a JSON API that uses an underscored naming convention instead of camelCasing.\nIt has been designed to work out of the box with the\n[active_model_serializers](http://github.com/rails-api/active_model_serializers)\nRuby gem. This Adapter expects specific settings using ActiveModel::Serializers,\n`embed :ids, include: true` which sideloads the records.\n\nThis adapter extends the DS.RESTAdapter by making consistent use of the camelization,\ndecamelization and pluralization methods to normalize the serialized JSON into a\nformat that is compatible with a conventional Rails backend and Ember Data.\n\n## JSON Structure\n\nThe ActiveModelAdapter expects the JSON returned from your server to follow\nthe REST adapter conventions substituting underscored keys for camelcased ones.\n\nUnlike the DS.RESTAdapter, async relationship keys must be the singular form\nof the relationship name, followed by \"_id\" for DS.belongsTo relationships,\nor \"_ids\" for DS.hasMany relationships.\n\n### Conventional Names\n\nAttribute names in your JSON payload should be the underscored versions of\nthe attributes in your Ember.js models.\n\nFor example, if you have a `Person` model:\n\n```js\nApp.FamousPerson = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string')\n});\n```\n\nThe JSON returned should look like this:\n\n```js\n{\n  \"famous_person\": {\n    \"id\": 1,\n    \"first_name\": \"Barack\",\n    \"last_name\": \"Obama\",\n    \"occupation\": \"President\"\n  }\n}\n```\n\nLet's imagine that `Occupation` is just another model:\n\n```js\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.belongsTo('occupation')\n});\n\nApp.Occupation = DS.Model.extend({\n  name: DS.attr('string'),\n  salary: DS.attr('number'),\n  people: DS.hasMany('person')\n});\n```\n\nThe JSON needed to avoid extra server calls, should look like this:\n\n```js\n{\n  \"people\": [{\n    \"id\": 1,\n    \"first_name\": \"Barack\",\n    \"last_name\": \"Obama\",\n    \"occupation_id\": 1\n  }],\n\n  \"occupations\": [{\n    \"id\": 1,\n    \"name\": \"President\",\n    \"salary\": 100000,\n    \"person_ids\": [1]\n  }]\n}\n```",
            "is_constructor": 1,
            "extends": "DS.RESTAdapter"
        },
        "DS.ActiveModelSerializer": {
            "name": "DS.ActiveModelSerializer",
            "shortname": "DS.ActiveModelSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "line": 13,
            "description": "The ActiveModelSerializer is a subclass of the RESTSerializer designed to integrate\nwith a JSON API that uses an underscored naming convention instead of camelCasing.\nIt has been designed to work out of the box with the\n[active_model_serializers](http://github.com/rails-api/active_model_serializers)\nRuby gem. This Serializer expects specific settings using ActiveModel::Serializers,\n`embed :ids, include: true` which sideloads the records.\n\nThis serializer extends the DS.RESTSerializer by making consistent\nuse of the camelization, decamelization and pluralization methods to\nnormalize the serialized JSON into a format that is compatible with\na conventional Rails backend and Ember Data.\n\n## JSON Structure\n\nThe ActiveModelSerializer expects the JSON returned from your server\nto follow the REST adapter conventions substituting underscored keys\nfor camelcased ones.\n\n### Conventional Names\n\nAttribute names in your JSON payload should be the underscored versions of\nthe attributes in your Ember.js models.\n\nFor example, if you have a `Person` model:\n\n```js\nApp.FamousPerson = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string')\n});\n```\n\nThe JSON returned should look like this:\n\n```js\n{\n  \"famous_person\": {\n    \"id\": 1,\n    \"first_name\": \"Barack\",\n    \"last_name\": \"Obama\",\n    \"occupation\": \"President\"\n  }\n}\n```\n\nLet's imagine that `Occupation` is just another model:\n\n```js\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.belongsTo('occupation')\n});\n\nApp.Occupation = DS.Model.extend({\n  name: DS.attr('string'),\n  salary: DS.attr('number'),\n  people: DS.hasMany('person')\n});\n```\n\nThe JSON needed to avoid extra server calls, should look like this:\n\n```js\n{\n  \"people\": [{\n    \"id\": 1,\n    \"first_name\": \"Barack\",\n    \"last_name\": \"Obama\",\n    \"occupation_id\": 1\n  }],\n\n  \"occupations\": [{\n    \"id\": 1,\n    \"name\": \"President\",\n    \"salary\": 100000,\n    \"person_ids\": [1]\n  }]\n}\n```",
            "extends": "DS.RESTSerializer"
        },
        "DS.FixtureAdapter": {
            "name": "DS.FixtureAdapter",
            "shortname": "DS.FixtureAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 13,
            "description": "`DS.FixtureAdapter` is an adapter that loads records from memory.\nIt's primarily used for development and testing. You can also use\n`DS.FixtureAdapter` while working on the API but is not ready to\nintegrate yet. It is a fully functioning adapter. All CRUD methods\nare implemented. You can also implement query logic that a remote\nsystem would do. It's possible to develop your entire application\nwith `DS.FixtureAdapter`.\n\nFor information on how to use the `FixtureAdapter` in your\napplication please see the [FixtureAdapter\nguide](/guides/models/the-fixture-adapter/).",
            "extends": "DS.Adapter"
        },
        "DS.RESTAdapter": {
            "name": "DS.RESTAdapter",
            "shortname": "DS.RESTAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 15,
            "description": "The REST adapter allows your store to communicate with an HTTP server by\ntransmitting JSON via XHR. Most Ember.js apps that consume a JSON API\nshould use the REST adapter.\n\nThis adapter is designed around the idea that the JSON exchanged with\nthe server should be conventional.\n\n## JSON Structure\n\nThe REST adapter expects the JSON returned from your server to follow\nthese conventions.\n\n### Object Root\n\nThe JSON payload should be an object that contains the record inside a\nroot property. For example, in response to a `GET` request for\n`/posts/1`, the JSON should look like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"I'm Running to Reform the W3C's Tag\",\n    \"author\": \"Yehuda Katz\"\n  }\n}\n```\n\nSimilarly, in response to a `GET` request for `/posts`, the JSON should\nlook like this:\n\n```js\n{\n  \"posts\": [\n    {\n      \"id\": 1,\n      \"title\": \"I'm Running to Reform the W3C's Tag\",\n      \"author\": \"Yehuda Katz\"\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Rails is omakase\",\n      \"author\": \"D2H\"\n    }\n  ]\n}\n```\n\n### Conventional Names\n\nAttribute names in your JSON payload should be the camelCased versions of\nthe attributes in your Ember.js models.\n\nFor example, if you have a `Person` model:\n\n```js\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string')\n});\n```\n\nThe JSON returned should look like this:\n\n```js\n{\n  \"person\": {\n    \"id\": 5,\n    \"firstName\": \"Barack\",\n    \"lastName\": \"Obama\",\n    \"occupation\": \"President\"\n  }\n}\n```\n\n## Customization\n\n### Endpoint path customization\n\nEndpoint paths can be prefixed with a `namespace` by setting the namespace\nproperty on the adapter:\n\n```js\nDS.RESTAdapter.reopen({\n  namespace: 'api/1'\n});\n```\nRequests for `App.Person` would now target `/api/1/people/1`.\n\n### Host customization\n\nAn adapter can target other hosts by setting the `host` property.\n\n```js\nDS.RESTAdapter.reopen({\n  host: 'https://api.example.com'\n});\n```\n\n### Headers customization\n\nSome APIs require HTTP headers, e.g. to provide an API key. Arbitrary\nheaders can be set as key/value pairs on the `RESTAdapter`'s `headers`\nobject and Ember Data will send them along with each ajax request.\n\n\n```js\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  headers: {\n    \"API_KEY\": \"secret key\",\n    \"ANOTHER_HEADER\": \"Some header value\"\n  }\n});\n```\n\n`headers` can also be used as a computed property to support dynamic\nheaders. In the example below, the `session` object has been\ninjected into an adapter by Ember's container.\n\n```js\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  headers: function() {\n    return {\n      \"API_KEY\": this.get(\"session.authToken\"),\n      \"ANOTHER_HEADER\": \"Some header value\"\n    };\n  }.property(\"session.authToken\")\n});\n```\n\nIn some cases, your dynamic headers may require data from some\nobject outside of Ember's observer system (for example\n`document.cookie`). You can use the\n[volatile](/api/classes/Ember.ComputedProperty.html#method_volatile)\nfunction to set the property into a non-cached mode causing the headers to\nbe recomputed with every request.\n\n```js\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  headers: function() {\n    return {\n      \"API_KEY\": Ember.get(document.cookie.match(/apiKey\\=([^;]*)/), \"1\"),\n      \"ANOTHER_HEADER\": \"Some header value\"\n    };\n  }.property().volatile()\n});\n```",
            "is_constructor": 1,
            "extends": "DS.Adapter"
        },
        "Ember.Date": {
            "name": "Ember.Date",
            "shortname": "Ember.Date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "Ember",
            "file": "packages/ember-data/lib/ext/date.js",
            "line": 5,
            "description": "Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>\n\n© 2011 Colin Snover <http://zetafleet.com>\n\nReleased under MIT license.",
            "static": 1
        },
        "DS.EmbeddedRecordsMixin": {
            "name": "DS.EmbeddedRecordsMixin",
            "shortname": "DS.EmbeddedRecordsMixin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 5,
            "description": "## Using Embedded Records\n\n`DS.EmbeddedRecordsMixin` supports serializing embedded records.\n\nTo set up embedded records, include the mixin when extending a serializer\nthen define and configure embedded (model) relationships.\n\nBelow is an example of a per-type serializer ('post' type).\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: { embedded: 'always' },\n    comments: { serialize: 'ids' }\n  }\n});\n```\nNote that this use of `{ embedded: 'always' }` is unrelated to\nthe `{ embedded: 'always' }` that is defined as an option on `DS.attr` as part of\ndefining a model while working with the ActiveModelSerializer.  Nevertheless,\nusing `{ embedded: 'always' }` as an option to DS.attr is not a valid way to setup\nembedded records.\n\nThe `attrs` option for a resource `{ embedded: 'always' }` is shorthand for:\n\n```js\n{ \n  serialize: 'records',\n  deserialize: 'records'\n}\n```\n\n### Configuring Attrs\n\nA resource's `attrs` option may be set to use `ids`, `records` or false for the\n`serialize`  and `deserialize` settings.\n\nThe `attrs` property can be set on the ApplicationSerializer or a per-type\nserializer.\n\nIn the case where embedded JSON is expected while extracting a payload (reading)\nthe setting is `deserialize: 'records'`, there is no need to use `ids` when\nextracting as that is the default behavior without this mixin if you are using\nthe vanilla EmbeddedRecordsMixin. Likewise, to embed JSON in the payload while\nserializing `serialize: 'records'` is the setting to use. There is an option of\nnot embedding JSON in the serialized payload by using `serialize: 'ids'`. If you\ndo not want the relationship sent at all, you can use `serialize: false`.\n\n\n### EmbeddedRecordsMixin defaults\nIf you do not overwrite `attrs` for a specific relationship, the `EmbeddedRecordsMixin`\nwill behave in the following way:\n\nBelongsTo: `{ serialize: 'id', deserialize: 'id' }`  \nHasMany:   `{ serialize: false, deserialize: 'ids' }`\n\n### Model Relationships\n\nEmbedded records must have a model defined to be extracted and serialized. Note that\nwhen defining any relationships on your model such as `belongsTo` and `hasMany`, you\nshould not both specify `async:true` and also indicate through the serializer's\n`attrs` attribute that the related model should be embedded.  If a model is\ndeclared embedded, then do not use `async:true`.\n\nTo successfully extract and serialize embedded records the model relationships\nmust be setup correcty See the\n[defining relationships](/guides/models/defining-models/#toc_defining-relationships)\nsection of the **Defining Models** guide page.\n\nRecords without an `id` property are not considered embedded records, model\ninstances must have an `id` property to be used with Ember Data.\n\n### Example JSON payloads, Models and Serializers\n\n**When customizing a serializer it is important to grok what the customizations\nare. Please read the docs for the methods this mixin provides, in case you need\nto modify it to fit your specific needs.**\n\nFor example review the docs for each method of this mixin:\n* [normalize](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_normalize)\n* [serializeBelongsTo](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeBelongsTo)\n* [serializeHasMany](/api/data/classes/DS.EmbeddedRecordsMixin.html#method_serializeHasMany)"
        },
        "DS.JSONSerializer": {
            "name": "DS.JSONSerializer",
            "shortname": "DS.JSONSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 6,
            "description": "In Ember Data a Serializer is used to serialize and deserialize\nrecords when they are transferred in and out of an external source.\nThis process involves normalizing property names, transforming\nattribute values and serializing relationships.\n\nFor maximum performance Ember Data recommends you use the\n[RESTSerializer](DS.RESTSerializer.html) or one of its subclasses.\n\n`JSONSerializer` is useful for simpler or legacy backends that may\nnot support the http://jsonapi.org/ spec."
        },
        "DS.RESTSerializer": {
            "name": "DS.RESTSerializer",
            "shortname": "DS.RESTSerializer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 17,
            "description": "Normally, applications will use the `RESTSerializer` by implementing\nthe `normalize` method and individual normalizations under\n`normalizeHash`.\n\nThis allows you to do whatever kind of munging you need, and is\nespecially useful if your server is inconsistent and you need to\ndo munging differently for many different kinds of responses.\n\nSee the `normalize` documentation for more information.\n\n## Across the Board Normalization\n\nThere are also a number of hooks that you might find useful to define\nacross-the-board rules for your payload. These rules will be useful\nif your server is consistent, or if you're building an adapter for\nan infrastructure service, like Parse, and want to encode service\nconventions.\n\nFor example, if all of your keys are underscored and all-caps, but\notherwise consistent with the names you use in your models, you\ncan implement across-the-board rules for how to convert an attribute\nname in your model to a key in your JSON.\n\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\n  keyForAttribute: function(attr) {\n    return Ember.String.underscore(attr).toUpperCase();\n  }\n});\n```\n\nYou can also implement `keyForRelationship`, which takes the name\nof the relationship as the first parameter, and the kind of\nrelationship (`hasMany` or `belongsTo`) as the second parameter.",
            "extends": "DS.JSONSerializer"
        },
        "DS.DebugAdapter": {
            "name": "DS.DebugAdapter",
            "shortname": "DS.DebugAdapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/debug/debug_adapter.js",
            "line": 9,
            "description": "Extend `Ember.DataAdapter` with ED specific code.",
            "extends": "Ember.DataAdapter",
            "access": "private",
            "tagname": ""
        },
        "DS.Model": {
            "name": "DS.Model",
            "shortname": "DS.Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 23,
            "description": "These observers observe all `belongsTo` relationships on the record. See\n`relationships/ext` to see how these observers get their dependencies.",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Evented"
            ]
        },
        "DS": {
            "name": "DS",
            "shortname": "DS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "",
            "file": "packages/ember-data/lib/core.js",
            "line": 5,
            "description": "All Ember Data methods and functions are defined inside of this namespace.",
            "static": 1
        },
        "DS.Errors": {
            "name": "DS.Errors",
            "shortname": "DS.Errors",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 13,
            "description": "Holds validation errors for a given record organized by attribute names.\n\nEvery DS.Model has an `errors` property that is an instance of\n`DS.Errors`. This can be used to display validation error\nmessages returned from the server when a `record.save()` rejects.\nThis works automatically with `DS.ActiveModelAdapter`, but you\ncan implement [ajaxError](api/data/classes/DS.RESTAdapter.html#method_ajaxError)\nin other adapters as well.\n\nFor Example, if you had an `User` model that looked like this:\n\n```javascript\nApp.User = DS.Model.extend({\n  username: attr('string'),\n  email: attr('string')\n});\n```\nAnd you attempted to save a record that did not validate on the backend.\n\n```javascript\nvar user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save();\n```\n\nYour backend data store might return a response that looks like\nthis. This response will be used to populate the error object.\n\n```javascript\n{\n  \"errors\": {\n    \"username\": [\"This username is already taken!\"],\n    \"email\": [\"Doesn't look like a valid email.\"]\n  }\n}\n```\n\nErrors can be displayed to the user by accessing their property name\nor using the `messages` property to get an array of all errors.\n\n```handlebars\n{{#each errors.messages}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n\n<label>Username: {{input value=username}} </label>\n{{#each errors.username}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n\n<label>Email: {{input value=email}} </label>\n{{#each errors.email}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
            "extends": "Ember.Object",
            "uses": [
                "Ember.Enumerable",
                "Ember.Evented"
            ]
        },
        "DS.RootState": {
            "name": "DS.RootState",
            "shortname": "DS.RootState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/model/states.js",
            "line": 11,
            "description": "### State\n\nEach record has a `currentState` property that explicitly tracks what\nstate a record is in at any given time. For instance, if a record is\nnewly created and has not yet been sent to the adapter to be saved,\nit would be in the `root.loaded.created.uncommitted` state.  If a\nrecord has had local modifications made to it that are in the\nprocess of being saved, the record would be in the\n`root.loaded.updated.inFlight` state. (This state paths will be\nexplained in more detail below.)\n\nEvents are sent by the record or its store to the record's\n`currentState` property. How the state reacts to these events is\ndependent on which state it is in. In some states, certain events\nwill be invalid and will cause an exception to be raised.\n\nStates are hierarchical and every state is a substate of the\n`RootState`. For example, a record can be in the\n`root.deleted.uncommitted` state, then transition into the\n`root.deleted.inFlight` state. If a child state does not implement\nan event handler, the state manager will attempt to invoke the event\non all parent states until the root state is reached. The state\nhierarchy of a record is described in terms of a path string. You\ncan determine a record's current state by getting the state's\n`stateName` property:\n\n```javascript\nrecord.get('currentState.stateName');\n//=> \"root.created.uncommitted\"\n ```\n\nThe hierarchy of valid states that ship with ember data looks like\nthis:\n\n```text\n* root\n  * deleted\n    * saved\n    * uncommitted\n    * inFlight\n  * empty\n  * loaded\n    * created\n      * uncommitted\n      * inFlight\n    * saved\n    * updated\n      * uncommitted\n      * inFlight\n  * loading\n```\n\nThe `DS.Model` states are themselves stateless. What that means is\nthat, the hierarchical states that each of *those* points to is a\nshared data structure. For performance reasons, instead of each\nrecord getting its own copy of the hierarchy of states, each record\npoints to this global, immutable shared instance. How does a state\nknow which record it should be acting on? We pass the record\ninstance into the state's event handlers as the first argument.\n\nThe record passed as the first parameter is where you should stash\nstate about the record if needed; you should never store data on the state\nobject itself.\n\n### Events and Flags\n\nA state may implement zero or more events and flags.\n\n#### Events\n\nEvents are named functions that are invoked when sent to a record. The\nrecord will first look for a method with the given name on the\ncurrent state. If no method is found, it will search the current\nstate's parent, and then its grandparent, and so on until reaching\nthe top of the hierarchy. If the root is reached without an event\nhandler being found, an exception will be raised. This can be very\nhelpful when debugging new features.\n\nHere's an example implementation of a state with a `myEvent` event handler:\n\n```javascript\naState: DS.State.create({\n  myEvent: function(manager, param) {\n    console.log(\"Received myEvent with\", param);\n  }\n})\n```\n\nTo trigger this event:\n\n```javascript\nrecord.send('myEvent', 'foo');\n//=> \"Received myEvent with foo\"\n```\n\nNote that an optional parameter can be sent to a record's `send()` method,\nwhich will be passed as the second parameter to the event handler.\n\nEvents should transition to a different state if appropriate. This can be\ndone by calling the record's `transitionTo()` method with a path to the\ndesired state. The state manager will attempt to resolve the state path\nrelative to the current state. If no state is found at that path, it will\nattempt to resolve it relative to the current state's parent, and then its\nparent, and so on until the root is reached. For example, imagine a hierarchy\nlike this:\n\n    * created\n      * uncommitted <-- currentState\n      * inFlight\n    * updated\n      * inFlight\n\nIf we are currently in the `uncommitted` state, calling\n`transitionTo('inFlight')` would transition to the `created.inFlight` state,\nwhile calling `transitionTo('updated.inFlight')` would transition to\nthe `updated.inFlight` state.\n\nRemember that *only events* should ever cause a state transition. You should\nnever call `transitionTo()` from outside a state's event handler. If you are\ntempted to do so, create a new event and send that to the state manager.\n\n#### Flags\n\nFlags are Boolean values that can be used to introspect a record's current\nstate in a more user-friendly way than examining its state path. For example,\ninstead of doing this:\n\n```javascript\nvar statePath = record.get('stateManager.currentPath');\nif (statePath === 'created.inFlight') {\n  doSomething();\n}\n```\n\nYou can say:\n\n```javascript\nif (record.get('isNew') && record.get('isSaving')) {\n  doSomething();\n}\n```\n\nIf your state does not set a value for a given flag, the value will\nbe inherited from its parent (or the first place in the state hierarchy\nwhere it is defined).\n\nThe current set of flags are defined below. If you want to add a new flag,\nin addition to the area below, you will also need to declare it in the\n`DS.Model` class.\n\n\n * [isEmpty](DS.Model.html#property_isEmpty)\n * [isLoading](DS.Model.html#property_isLoading)\n * [isLoaded](DS.Model.html#property_isLoaded)\n * [isDirty](DS.Model.html#property_isDirty)\n * [isSaving](DS.Model.html#property_isSaving)\n * [isDeleted](DS.Model.html#property_isDeleted)\n * [isNew](DS.Model.html#property_isNew)\n * [isValid](DS.Model.html#property_isValid)"
        },
        "DS.AdapterPopulatedRecordArray": {
            "name": "DS.AdapterPopulatedRecordArray",
            "shortname": "DS.AdapterPopulatedRecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/record_arrays/adapter_populated_record_array.js",
            "line": 16,
            "description": "Represents an ordered list of records whose order and membership is\ndetermined by the adapter. For example, a query sent to the adapter\nmay trigger a search on the server, whose results would be loaded\ninto an instance of the `AdapterPopulatedRecordArray`.",
            "extends": "DS.RecordArray"
        },
        "DS.FilteredRecordArray": {
            "name": "DS.FilteredRecordArray",
            "shortname": "DS.FilteredRecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/record_arrays/filtered_record_array.js",
            "line": 9,
            "description": "Represents a list of records whose membership is determined by the\nstore. As records are created, loaded, or modified, the store\nevaluates them to determine if they should be part of the record\narray.",
            "extends": "DS.RecordArray"
        },
        "DS.ManyArray": {
            "name": "DS.ManyArray",
            "shortname": "DS.ManyArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "line": 9,
            "description": "A `ManyArray` is a `RecordArray` that represents the contents of a has-many\nrelationship.\n\nThe `ManyArray` is instantiated lazily the first time the relationship is\nrequested.\n\n### Inverses\n\nOften, the relationships in Ember Data applications will have\nan inverse. For example, imagine the following models are\ndefined:\n\n```javascript\nApp.Post = DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n\nApp.Comment = DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n```\n\nIf you created a new instance of `App.Post` and added\na `App.Comment` record to its `comments` has-many\nrelationship, you would expect the comment's `post`\nproperty to be set to the post that contained\nthe has-many.\n\nWe call the record to which a relationship belongs the\nrelationship's _owner_.",
            "extends": "DS.RecordArray"
        },
        "DS.RecordArray": {
            "name": "DS.RecordArray",
            "shortname": "DS.RecordArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 8,
            "description": "A record array is an array that contains records of a certain type. The record\narray materializes records as needed when they are retrieved for the first\ntime. You should not create record arrays yourself. Instead, an instance of\n`DS.RecordArray` or its subclasses will be returned by your application's store\nin response to queries.",
            "extends": "Ember.ArrayProxy",
            "uses": [
                "Ember.Evented"
            ]
        },
        "DS.InvalidError": {
            "name": "DS.InvalidError",
            "shortname": "DS.InvalidError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 17,
            "description": "A `DS.InvalidError` is used by an adapter to signal the external API\nwas unable to process a request because the content was not\nsemantically correct or meaningful per the API. Usually this means a\nrecord failed some form of server side validation. When a promise\nfrom an adapter is rejected with a `DS.InvalidError` the record will\ntransition to the `invalid` state and the errors will be set to the\n`errors` property on the record.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  ajaxError: function(jqXHR) {\n    var error = this._super(jqXHR);\n\n    if (jqXHR && jqXHR.status === 422) {\n      var jsonErrors = Ember.$.parseJSON(jqXHR.responseText)[\"errors\"];\n      return new DS.InvalidError(jsonErrors);\n    } else {\n      return error;\n    }\n  }\n});\n```\n\nThe `DS.InvalidError` must be constructed with a single object whose\nkeys are the invalid model properties, and whose values are the\ncorresponding error messages. For example:\n\n```javascript\nreturn new DS.InvalidError({\n  length: 'Must be less than 15',\n  name: 'Must not be blank\n});\n```"
        },
        "DS.Adapter": {
            "name": "DS.Adapter",
            "shortname": "DS.Adapter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 68,
            "description": "An adapter is an object that receives requests from a store and\ntranslates them into the appropriate action to take against your\npersistence layer. The persistence layer is usually an HTTP API, but\nmay be anything, such as the browser's local storage. Typically the\nadapter is not invoked directly instead its functionality is accessed\nthrough the `store`.\n\n### Creating an Adapter\n\nCreate a new subclass of `DS.Adapter`, then assign\nit to the `ApplicationAdapter` property of the application.\n\n```javascript\nvar MyAdapter = DS.Adapter.extend({\n  // ...your code here\n});\n\nApp.ApplicationAdapter = MyAdapter;\n```\n\nModel-specific adapters can be created by assigning your adapter\nclass to the `ModelName` + `Adapter` property of the application.\n\n```javascript\nvar MyPostAdapter = DS.Adapter.extend({\n  // ...Post-specific adapter code goes here\n});\n\nApp.PostAdapter = MyPostAdapter;\n```\n\n`DS.Adapter` is an abstract base class that you should override in your\napplication to customize it for your backend. The minimum set of methods\nthat you should implement is:\n\n  * `find()`\n  * `createRecord()`\n  * `updateRecord()`\n  * `deleteRecord()`\n  * `findAll()`\n  * `findQuery()`\n\nTo improve the network performance of your application, you can optimize\nyour adapter by overriding these lower-level methods:\n\n  * `findMany()`\n\n\nFor an example implementation, see `DS.RESTAdapter`, the\nincluded REST adapter.",
            "extends": "Ember.Object"
        },
        "DS.ContainerProxy": {
            "name": "DS.ContainerProxy",
            "shortname": "DS.ContainerProxy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/container_proxy.js",
            "line": 1,
            "description": "This is used internally to enable deprecation of container paths and provide\na decent message to the user indicating how to fix the issue.",
            "access": "private",
            "tagname": ""
        },
        "DS.PromiseArray": {
            "name": "DS.PromiseArray",
            "shortname": "DS.PromiseArray",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/promise_proxies.js",
            "line": 4,
            "description": "A `PromiseArray` is an object that acts like both an `Ember.Array`\nand a promise. When the promise is resolved the resulting value\nwill be set to the `PromiseArray`'s `content` property. This makes\nit easy to create data bindings with the `PromiseArray` that will be\nupdated when the promise resolves.\n\nFor more information see the [Ember.PromiseProxyMixin\ndocumentation](/api/classes/Ember.PromiseProxyMixin.html).\n\nExample\n\n```javascript\nvar promiseArray = DS.PromiseArray.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\npromiseArray.get('length'); // 0\n\npromiseArray.then(function() {\n  promiseArray.get('length'); // 100\n});\n```",
            "extends": "Ember.ArrayProxy",
            "uses": [
                "Ember.PromiseProxyMixin"
            ]
        },
        "DS.PromiseObject": {
            "name": "DS.PromiseObject",
            "shortname": "DS.PromiseObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/promise_proxies.js",
            "line": 35,
            "description": "A `PromiseObject` is an object that acts like both an `Ember.Object`\nand a promise. When the promise is resolved, then the resulting value\nwill be set to the `PromiseObject`'s `content` property. This makes\nit easy to create data bindings with the `PromiseObject` that will\nbe updated when the promise resolves.\n\nFor more information see the [Ember.PromiseProxyMixin\ndocumentation](/api/classes/Ember.PromiseProxyMixin.html).\n\nExample\n\n```javascript\nvar promiseObject = DS.PromiseObject.create({\n  promise: $.getJSON('/some/remote/data.json')\n});\n\npromiseObject.get('name'); // null\n\npromiseObject.then(function() {\n  promiseObject.get('name'); // 'Tomster'\n});\n```",
            "extends": "Ember.ObjectProxy",
            "uses": [
                "Ember.PromiseProxyMixin"
            ]
        },
        "DS.RecordArrayManager": {
            "name": "DS.RecordArrayManager",
            "shortname": "DS.RecordArrayManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 18,
            "access": "private",
            "tagname": "",
            "extends": "Ember.Object"
        },
        "DS.Store": {
            "name": "DS.Store",
            "shortname": "DS.Store",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/system/store.js",
            "line": 61,
            "description": "The store contains all of the data for records loaded from the server.\nIt is also responsible for creating instances of `DS.Model` that wrap\nthe individual data for a record, so that they can be bound to in your\nHandlebars templates.\n\nDefine your application's store like this:\n\n```javascript\nMyApp.Store = DS.Store.extend();\n```\n\nMost Ember.js applications will only have a single `DS.Store` that is\nautomatically created by their `Ember.Application`.\n\nYou can retrieve models from the store in several ways. To retrieve a record\nfor a specific id, use `DS.Store`'s `find()` method:\n\n```javascript\nstore.find('person', 123).then(function (person) {\n});\n```\n\nIf your application has multiple `DS.Store` instances (an unusual case), you can\nspecify which store should be used:\n\n```javascript\nstore.find('person', 123).then(function (person) {\n});\n```\n\nBy default, the store will talk to your backend using a standard\nREST mechanism. You can customize how the store talks to your\nbackend by specifying a custom adapter:\n\n```javascript\nMyApp.ApplicationAdapter = MyApp.CustomAdapter\n```\n\nYou can learn more about writing a custom adapter by reading the `DS.Adapter`\ndocumentation.\n\n### Store createRecord() vs. push() vs. pushPayload() vs. update()\n\nThe store provides multiple ways to create new record objects. They have\nsome subtle differences in their use which are detailed below:\n\n[createRecord](#method_createRecord) is used for creating new\nrecords on the client side. This will return a new record in the\n`created.uncommitted` state. In order to persist this record to the\nbackend you will need to call `record.save()`.\n\n[push](#method_push) is used to notify Ember Data's store of new or\nupdated records that exist in the backend. This will return a record\nin the `loaded.saved` state. The primary use-case for `store#push` is\nto notify Ember Data about record updates that happen\noutside of the normal adapter methods (for example\n[SSE](http://dev.w3.org/html5/eventsource/) or [Web\nSockets](http://www.w3.org/TR/2009/WD-websockets-20091222/)).\n\n[pushPayload](#method_pushPayload) is a convenience wrapper for\n`store#push` that will deserialize payloads if the\nSerializer implements a `pushPayload` method.\n\n[update](#method_update) works like `push`, except it can handle\npartial attributes without overwriting the existing record\nproperties.\n\nNote: When creating a new record using any of the above methods\nEmber Data will update `DS.RecordArray`s such as those returned by\n`store#all()`, `store#findAll()` or `store#filter()`. This means any\ndata bindings or computed properties that depend on the RecordArray\nwill automatically be synced to include the new or updated record\nvalues.",
            "extends": "Ember.Object"
        },
        "DS.Transform": {
            "name": "DS.Transform",
            "shortname": "DS.Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/transforms/base.js",
            "line": 1,
            "description": "The `DS.Transform` class is used to serialize and deserialize model\nattributes when they are saved or loaded from an\nadapter. Subclassing `DS.Transform` is useful for creating custom\nattributes. All subclasses of `DS.Transform` must implement a\n`serialize` and a `deserialize` method.\n\nExample\n\n```javascript\n// Converts centigrade in the JSON to fahrenheit in the app\nApp.TemperatureTransform = DS.Transform.extend({\n  deserialize: function(serialized) {\n    return (serialized *  1.8) + 32;\n  },\n  serialize: function(deserialized) {\n    return (deserialized - 32) / 1.8;\n  }\n});\n```\n\nUsage\n\n```javascript\nvar attr = DS.attr;\nApp.Requirement = DS.Model.extend({\n  name: attr('string'),\n  temperature: attr('temperature')\n});\n```"
        },
        "DS.BooleanTransform": {
            "name": "DS.BooleanTransform",
            "shortname": "DS.BooleanTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/transforms/boolean.js",
            "line": 3,
            "description": "The `DS.BooleanTransform` class is used to serialize and deserialize\nboolean attributes on Ember Data record objects. This transform is\nused when `boolean` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```javascript\nvar attr = DS.attr;\nApp.User = DS.Model.extend({\n  isAdmin: attr('boolean'),\n  name: attr('string'),\n  email: attr('string')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.DateTransform": {
            "name": "DS.DateTransform",
            "shortname": "DS.DateTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/transforms/date.js",
            "line": 1,
            "description": "The `DS.DateTransform` class is used to serialize and deserialize\ndate attributes on Ember Data record objects. This transform is used\nwhen `date` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\n```javascript\nvar attr = DS.attr;\nApp.Score = DS.Model.extend({\n  value: attr('number'),\n  player: DS.belongsTo('player'),\n  date: attr('date')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.NumberTransform": {
            "name": "DS.NumberTransform",
            "shortname": "DS.NumberTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/transforms/number.js",
            "line": 5,
            "description": "The `DS.NumberTransform` class is used to serialize and deserialize\nnumeric attributes on Ember Data record objects. This transform is\nused when `number` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```javascript\nvar attr = DS.attr;\nApp.Score = DS.Model.extend({\n  value: attr('number'),\n  player: DS.belongsTo('player'),\n  date: attr('date')\n});\n```",
            "extends": "DS.Transform"
        },
        "DS.StringTransform": {
            "name": "DS.StringTransform",
            "shortname": "DS.StringTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "ember-data",
            "namespace": "DS",
            "file": "packages/ember-data/lib/transforms/string.js",
            "line": 4,
            "description": "The `DS.StringTransform` class is used to serialize and deserialize\nstring attributes on Ember Data record objects. This transform is\nused when `string` is passed as the type parameter to the\n[DS.attr](../../data#method_attr) function.\n\nUsage\n\n```javascript\nvar attr = DS.attr;\nApp.User = DS.Model.extend({\n  isAdmin: attr('boolean'),\n  name: attr('string'),\n  email: attr('string')\n});\n```",
            "extends": "DS.Transform"
        }
    },
    "classitems": [
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_adapter.js",
            "line": 106,
            "description": "The ActiveModelAdapter overrides the `pathForType` method to build\nunderscored URLs by decamelizing and pluralizing the object type name.\n\n```js\n  this.pathForType(\"famousPerson\");\n  //=> \"famous_people\"\n```",
            "itemtype": "method",
            "name": "pathForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "DS.ActiveModelAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_adapter.js",
            "line": 125,
            "description": "The ActiveModelAdapter overrides the `ajaxError` method\nto return a DS.InvalidError for all 422 Unprocessable Entity\nresponses.\n\nA 422 HTTP response from the server generally implies that the request\nwas well formed but the API was unable to process it because the\ncontent was not semantically correct or meaningful per the API.\n\nFor more information on 422 HTTP Error code see 11.2 WebDAV RFC 4918\nhttps://tools.ietf.org/html/rfc4918#section-11.2",
            "itemtype": "method",
            "name": "ajaxError",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "error"
            },
            "class": "DS.ActiveModelAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "line": 103,
            "description": "Converts camelCased attributes to underscored when serializing.",
            "itemtype": "method",
            "name": "keyForAttribute",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "line": 118,
            "description": "Underscores relationship names and appends \"_id\" or \"_ids\" when serializing\nrelationship keys.",
            "itemtype": "method",
            "name": "keyForRelationship",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "kind",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "line": 143,
            "description": "Underscores the JSON root keys when serializing.",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "line": 157,
            "description": "Serializes a polymorphic type as a fully capitalized model name.",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "line": 179,
            "description": "Add extra step to `DS.RESTSerializer.normalize` so links are normalized.\n\nIf your payload looks like:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"links\": { \"flagged_comments\": \"api/comments/flagged\" }\n  }\n}\n```\n\nThe normalized version would look like this\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"links\": { \"flaggedComments\": \"api/comments/flagged\" }\n  }\n}\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object"
            },
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "line": 219,
            "description": "Convert `snake_cased` links  to `camelCase`",
            "itemtype": "method",
            "name": "normalizeLinks",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/activemodel-adapter/lib/system/active_model_serializer.js",
            "line": 241,
            "description": "Normalize the polymorphic type from the JSON.\n\nNormalize:\n```js\n  {\n    id: \"1\"\n    minion: { type: \"evil_minion\", id: \"12\"}\n  }\n```\n\nTo:\n```js\n  {\n    id: \"1\"\n    minion: { type: \"evilMinion\", id: \"12\"}\n  }\n```",
            "itemtype": "method",
            "name": "normalizeRelationships",
            "access": "private",
            "tagname": "",
            "class": "DS.ActiveModelSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 34,
            "description": "If `simulateRemoteResponse` is `true` the `FixtureAdapter` will\nwait a number of milliseconds before resolving promises with the\nfixture values. The wait time can be configured via the `latency`\nproperty.",
            "itemtype": "property",
            "name": "simulateRemoteResponse",
            "type": "{Boolean}",
            "default": "true",
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 46,
            "description": "By default the `FixtureAdapter` will simulate a wait of the\n`latency` milliseconds before resolving promises with the fixture\nvalues. This behavior can be turned off via the\n`simulateRemoteResponse` property.",
            "itemtype": "property",
            "name": "latency",
            "type": "{Number}",
            "default": "50",
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 58,
            "description": "Implement this method in order to provide data associated with a type",
            "itemtype": "method",
            "name": "fixturesForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Subclass of DS.Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 80,
            "description": "Implement this method in order to query fixtures data",
            "itemtype": "method",
            "name": "queryFixtures",
            "params": [
                {
                    "name": "fixture",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Subclass of DS.Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise|Array"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 93,
            "itemtype": "method",
            "name": "updateFixtures",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Subclass of DS.Model"
                },
                {
                    "name": "fixture",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 110,
            "description": "Implement this method in order to provide json for CRUD methods",
            "itemtype": "method",
            "name": "mockJSON",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 121,
            "itemtype": "method",
            "name": "generateIdForRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "id",
                "type": "String"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 131,
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 155,
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 180,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "sinceToken",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 198,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findQuery",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "recordArray",
                    "description": "",
                    "type": "DS.AdapterPopulatedRecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 221,
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 238,
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/fixture_adapter.js",
            "line": 255,
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.FixtureAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 173,
            "description": "By default the RESTAdapter will send each find request coming from a `store.find`\nor from accessing a relationship separately to the server. If your server supports passing\nids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\nwithin a single runloop.\n\nFor example, if you have an initial payload of\n```javascript\npost: {\n  id:1,\n  comments: [1,2]\n}\n```\n\nBy default calling `post.get('comments')` will trigger the following requests(assuming the\ncomments haven't been loaded before):\n\n```\nGET /comments/1\nGET /comments/2\n```\n\nIf you set coalesceFindRequests to `true` it will instead trigger the following request:\n\n```\nGET /comments?ids[]=1&ids[]=2\n```\n\nSetting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\nrelationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n\n```javascript\nstore.find('comment', 1);\nstore.find('comment', 2);\n```\n\nwill also send a request to: `GET /comments?ids[]=1&ids[]=2`\n\nNote: Requests coalescing rely on URL building strategy. So if you override `buildUrl` in your app\n`groupRecordsForFindMany` more likely should be overriden as well in order for coalescing to work.",
            "itemtype": "property",
            "name": "coalesceFindRequests",
            "type": "{boolean}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 219,
            "description": "Endpoint paths can be prefixed with a `namespace` by setting the namespace\nproperty on the adapter:\n\n```javascript\nDS.RESTAdapter.reopen({\n  namespace: 'api/1'\n});\n```\n\nRequests for `App.Post` would now target `/api/1/post/`.",
            "itemtype": "property",
            "name": "namespace",
            "type": "{String}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 235,
            "description": "An adapter can target other hosts by setting the `host` property.\n\n```javascript\nDS.RESTAdapter.reopen({\n  host: 'https://api.example.com'\n});\n```\n\nRequests for `App.Post` would now target `https://api.example.com/post/`.",
            "itemtype": "property",
            "name": "host",
            "type": "{String}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 250,
            "description": "Some APIs require HTTP headers, e.g. to provide an API\nkey. Arbitrary headers can be set as key/value pairs on the\n`RESTAdapter`'s `headers` object and Ember Data will send them\nalong with each ajax request. For dynamic headers see [headers\ncustomization](/api/data/classes/DS.RESTAdapter.html#toc_headers-customization).\n\n```javascript\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  headers: {\n    \"API_KEY\": \"secret key\",\n    \"ANOTHER_HEADER\": \"Some header value\"\n  }\n});\n```",
            "itemtype": "property",
            "name": "headers",
            "type": "{Object}",
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 270,
            "description": "Called by the store in order to fetch the JSON for a given\ntype and ID.\n\nThe `find` method makes an Ajax request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.\n\nThis method performs an HTTP `GET` request with the id provided as part of the query string.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 290,
            "description": "Called by the store in order to fetch a JSON array for all\nof the records for a given type.\n\nThe `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "sinceToken",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 314,
            "description": "Called by the store in order to fetch a JSON array for\nthe records that match a particular query.\n\nThe `findQuery` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.\n\nThe `query` argument is a simple JavaScript object that will be passed directly\nto the server as parameters.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findQuery",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 335,
            "description": "Called by the store in order to fetch several records together if `coalesceFindRequests` is true\n\nFor example, if the original payload looks like:\n\n```js\n{\n  \"id\": 1,\n  \"title\": \"Rails is omakase\",\n  \"comments\": [ 1, 2, 3 ]\n}\n```\n\nThe IDs will be passed as a URL-encoded Array of IDs, in this form:\n\n```\nids[]=1&ids[]=2&ids[]=3\n```\n\nMany servers, such as Rails and PHP, will automatically convert this URL-encoded array\ninto an Array for you on the server-side. If you want to encode the\nIDs, differently, just override this (one-line) method.\n\nThe `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 372,
            "description": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a has-many relationship that were originally\nspecified as a URL (inside of `links`).\n\nFor example, if your original payload looks like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"links\": { \"comments\": \"/posts/1/comments\" }\n  }\n}\n```\n\nThis method will be called with the parent record and `/posts/1/comments`.\n\nThe `findHasMany` method will make an Ajax (HTTP GET) request to the originally specified URL.\nIf the URL is host-relative (starting with a single slash), the\nrequest will use the host specified on the adapter (if any).",
            "itemtype": "method",
            "name": "findHasMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 413,
            "description": "Called by the store in order to fetch a JSON array for\nthe unloaded records in a belongs-to relationship that were originally\nspecified as a URL (inside of `links`).\n\nFor example, if your original payload looks like this:\n\n```js\n{\n  \"person\": {\n    \"id\": 1,\n    \"name\": \"Tom Dale\",\n    \"links\": { \"group\": \"/people/1/group\" }\n  }\n}\n```\n\nThis method will be called with the parent record and `/people/1/group`.\n\nThe `findBelongsTo` method will make an Ajax (HTTP GET) request to the originally specified URL.",
            "itemtype": "method",
            "name": "findBelongsTo",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 447,
            "description": "Called by the store when a newly created record is\nsaved via the `save` method on a model record instance.\n\nThe `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\nto a URL computed by `buildURL`.\n\nSee `serialize` for information on how to customize the serialized form\nof a record.",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 472,
            "description": "Called by the store when an existing record is saved\nvia the `save` method on a model record instance.\n\nThe `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\nto a URL computed by `buildURL`.\n\nSee `serialize` for information on how to customize the serialized form\nof a record.",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 499,
            "description": "Called by the store when a record is deleted.\n\nThe `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 516,
            "description": "Builds a URL for a given type and optional ID.\n\nBy default, it pluralizes the type's name (for example, 'post'\nbecomes 'posts' and 'person' becomes 'people'). To override the\npluralization see [pathForType](#method_pathForType).\n\nIf an ID is specified, it adds the ID to the path generated\nfor the type, separated by a `/`.",
            "itemtype": "method",
            "name": "buildURL",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "url",
                "type": "String"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 552,
            "itemtype": "method",
            "name": "urlPrefix",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "parentUrl",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "urlPrefix",
                "type": "String"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 605,
            "description": "Organize records into groups, each of which is to be passed to separate\ncalls to `findMany`.\n\nThis implementation groups together records that have the same base URL but\ndiffering ids. For example `/comments/1` and `/comments/2` will be grouped together\nbecause we know findMany can coalesce them together as `/comments?ids[]=1&ids[]=2`\n\nIt also supports urls where ids are passed as a query param, such as `/comments?id=1`\nbut not those where there is more than 1 query param such as `/comments?id=2&name=David`\nCurrently only the query param of `id` is supported. If you need to support others, please\noverride this or the `_stripIDFromURL` method.\n\nIt does not group records that have differing base urls, such as for example: `/posts/1/comments/2`\nand `/posts/2/comments/3`",
            "itemtype": "method",
            "name": "groupRecordsForFindMany",
            "params": [
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
                "type": "Array"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 670,
            "description": "Determines the pathname for a given type.\n\nBy default, it pluralizes the type's name (for example,\n'post' becomes 'posts' and 'person' becomes 'people').\n\n### Pathname customization\n\nFor example if you have an object LineItem with an\nendpoint of \"/line_items/\".\n\n```js\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  pathForType: function(type) {\n    var decamelized = Ember.String.decamelize(type);\n    return Ember.String.pluralize(decamelized);\n  }\n});\n```",
            "itemtype": "method",
            "name": "pathForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "path",
                "type": "String"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 699,
            "description": "Takes an ajax response, and returns a relevant error.\n\nReturning a `DS.InvalidError` from this method will cause the\nrecord to transition into the `invalid` state and make the\n`errors` object available on the record.\n\n```javascript\nApp.ApplicationAdapter = DS.RESTAdapter.extend({\n  ajaxError: function(jqXHR) {\n    var error = this._super(jqXHR);\n\n    if (jqXHR && jqXHR.status === 422) {\n      var jsonErrors = Ember.$.parseJSON(jqXHR.responseText)[\"errors\"];\n\n      return new DS.InvalidError(jsonErrors);\n    } else {\n      return error;\n    }\n  }\n});\n```\n\nNote: As a correctness optimization, the default implementation of\nthe `ajaxError` method strips out the `then` method from jquery's\najax response (jqXHR). This is important because the jqXHR's\n`then` method fulfills the promise with itself resulting in a\ncircular \"thenable\" chain which may cause problems for some\npromise libraries.",
            "itemtype": "method",
            "name": "ajaxError",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "responseText",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "jqXHR",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 742,
            "description": "Takes an ajax response, and returns the json payload.\n\nBy default this hook just returns the jsonPayload passed to it.\nYou might want to override it in two cases:\n\n1. Your API might return useful results in the request headers.\nIf you need to access these, you can override this hook to copy them\nfrom jqXHR to the payload object so they can be processed in you serializer.\n\n\n2. Your API might return errors as successful responses with status code\n200 and an Errors text or object. You can return a DS.InvalidError from\nthis hook and it will automatically reject the promise and put your record\ninto the invald state.",
            "itemtype": "method",
            "name": "ajaxError",
            "params": [
                {
                    "name": "jqXHR",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "jsonPayload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "jqXHR",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 768,
            "description": "Takes a URL, an HTTP method and a hash of data, and makes an\nHTTP request.\n\nWhen the server responds with a payload, Ember Data will call into `extractSingle`\nor `extractArray` (depending on whether the original query was for one record or\nmany records).\n\nBy default, `ajax` method has the following behavior:\n\n* It sets the response `dataType` to `\"json\"`\n* If the HTTP method is not `\"GET\"`, it sets the `Content-Type` to be\n  `application/json; charset=utf-8`\n* If the HTTP method is not `\"GET\"`, it stringifies the data passed in. The\n  data is the serialized record in the case of a save.\n* Registers success and failure handlers.",
            "itemtype": "method",
            "name": "ajax",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/adapters/rest_adapter.js",
            "line": 815,
            "itemtype": "method",
            "name": "ajaxOptions",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The request type GET, POST, PUT, DELETE etc.",
                    "type": "String"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "hash",
                "type": "Object"
            },
            "class": "DS.RESTAdapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/ext/date.js",
            "line": 20,
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "date",
                    "description": "",
                    "type": "Date"
                }
            ],
            "return": {
                "description": "timestamp",
                "type": "Number"
            },
            "class": "Ember.Date",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-data/lib/initializers/data_adapter.js",
            "line": 3,
            "description": "Configures a container with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.",
            "itemtype": "method",
            "name": "initializeStoreInjections",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "Ember.Container"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-data/lib/initializers/store.js",
            "line": 6,
            "description": "Configures a container for use with an Ember-Data\nstore. Accepts an optional namespace argument.",
            "itemtype": "method",
            "name": "initializeStore",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "Ember.Container"
                },
                {
                    "name": "application",
                    "description": "an application namespace",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-data/lib/initializers/store_injections.js",
            "line": 1,
            "description": "Configures a container with injections on Ember applications\nfor the Ember-Data store. Accepts an optional namespace argument.",
            "itemtype": "method",
            "name": "initializeStoreInjections",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "Ember.Container"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-data/lib/initializers/transforms.js",
            "line": 8,
            "description": "Configures a container for use with Ember-Data\ntransforms.",
            "itemtype": "method",
            "name": "initializeTransforms",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "Ember.Container"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "Ember"
        },
        {
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 94,
            "description": "Normalize the record and recursively normalize/extract all the embedded records\nwhile pushing them into the store as they are encountered\n\nA payload with an attr configured for embedded records needs to be extracted:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "hash",
                    "description": "to be normalized",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "the hash has been referenced by",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the normalized hash",
                "type": "Object"
            },
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 158,
            "description": "The property to use when serializing a client id.",
            "itemtype": "property",
            "name": "clientIdKey",
            "type": "{String}",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 166,
            "description": "Map of client ids, these are temporary ids used when saving new embedded records.\n\nThey will be reconciled upon loading embedded records. Once a client id has been\nreconciled with a record that has since been given a real id, the clientIdMap\nentry will be deleted",
            "itemtype": "property",
            "name": "clientIdMap",
            "type": "{Object}",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 180,
            "description": "Needed because the Ember.computed above does not work (??)",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 189,
            "description": "Return a unique client id",
            "itemtype": "property",
            "name": "createClientId",
            "type": "{String}",
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 201,
            "description": "Serialize `belongsTo` relationship when it is configured as an embedded object.\n\nThis example of an author model belongs to a post model:\n\n```js\nPost = DS.Model.extend({\n  title:    DS.attr('string'),\n  body:     DS.attr('string'),\n  author:   DS.belongsTo('author')\n});\n\nAuthor = DS.Model.extend({\n  name:     DS.attr('string'),\n  post:     DS.belongsTo('post')\n});\n```\n\nUse a custom (type) serializer for the post model to configure embedded author\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    author: {embedded: 'always'}\n  }\n})\n```\n\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"author\": {\n      \"id\": \"2\"\n      \"name\": \"dhh\"\n    }\n  }\n}\n```",
            "itemtype": "method",
            "name": "serializeBelongsTo",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 278,
            "description": "Serialize `hasMany` relationship when it is configured as embedded objects.\n\nThis example of a post model has many comments:\n\n```js\nPost = DS.Model.extend({\n  title:    DS.attr('string'),\n  body:     DS.attr('string'),\n  comments: DS.hasMany('comment')\n});\n\nComment = DS.Model.extend({\n  body:     DS.attr('string'),\n  post:     DS.belongsTo('post')\n});\n```\n\nUse a custom (type) serializer for the post model to configure embedded comments\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: {embedded: 'always'}\n  }\n})\n```\n\nA payload with an attribute configured for embedded records can serialize\nthe records together under the root attribute's payload:\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [{\n      \"id\": \"1\",\n      \"body\": \"Rails is unagi\"\n    }, {\n      \"id\": \"2\",\n      \"body\": \"Omakase O_o\"\n    }]\n  }\n}\n```\n\nThe attrs options object can use more specific instruction for extracting and\nserializing. When serializing, an option to embed `ids` or `records` can be set.\nWhen extracting the only option is `records`.\n\nSo `{embedded: 'always'}` is shorthand for:\n`{serialize: 'records', deserialize: 'records'}`\n\nTo embed the `ids` for a related object (using a hasMany relationship):\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend(DS.EmbeddedRecordsMixin, {\n  attrs: {\n    comments: {serialize: 'ids', deserialize: 'records'}\n  }\n})\n```\n\n```js\n{\n  \"post\": {\n    \"id\": \"1\"\n    \"title\": \"Rails is omakase\",\n    \"body\": \"I want this for my ORM, I want that for my template language...\"\n    \"comments\": [\"1\", \"2\"]\n  }\n}\n```",
            "itemtype": "method",
            "name": "serializeHasMany",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/embedded_records_mixin.js",
            "line": 393,
            "description": "When serializing an embedded record, modify the property (in the json payload)\nthat refers to the parent record (foreign key for relationship).\n\nSerializing a `belongsTo` relationship removes the property that refers to the\nparent record\n\nSerializing a `hasMany` relationship does not remove the property that refers to\nthe parent record.",
            "itemtype": "method",
            "name": "removeEmbeddedForeignKey",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "embeddedRecord",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.EmbeddedRecordsMixin",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 22,
            "description": "The primaryKey is used when serializing and deserializing\ndata. Ember Data always uses the `id` property to store the id of\nthe record. The external source may not always follow this\nconvention. In these cases it is useful to override the\nprimaryKey property to match the primaryKey of your external\nstore.\n\nExample\n\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\n  primaryKey: '_id'\n});\n```",
            "itemtype": "property",
            "name": "primaryKey",
            "type": "{String}",
            "default": "'id'",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 44,
            "description": "The `attrs` object can be used to declare a simple mapping between\nproperty names on `DS.Model` records and payload keys in the\nserialized JSON object representing the record. An object with the\nproperty `key` can also be used to designate the attribute's key on\nthe response payload.\n\nExample\n\n```javascript\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string'),\n  occupation: DS.attr('string'),\n  admin: DS.attr('boolean')\n});\n\nApp.PersonSerializer = DS.JSONSerializer.extend({\n  attrs: {\n    admin: 'is_admin',\n    occupation: {key: 'career'}\n  }\n});\n```\n\nYou can also remove attributes by setting the `serialize` key to\nfalse in your mapping object.\n\nExample\n\n```javascript\nApp.PersonSerializer = DS.JSONSerializer.extend({\n  attrs: {\n    admin: {serialize: false},\n    occupation: {key: 'career'}\n  }\n});\n```\n\nWhen serialized:\n\n```javascript\n{\n  \"career\": \"magician\"\n}\n```\n\nNote that the `admin` is now not included in the payload.",
            "itemtype": "property",
            "name": "attrs",
            "type": "{Object}",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 97,
            "description": "Given a subclass of `DS.Model` and a JSON object this method will\niterate through each attribute of the `DS.Model` and invoke the\n`DS.Transform#deserialize` method on the matching property of the\nJSON object.  This method is typically called after the\nserializer's `normalize` method.",
            "itemtype": "method",
            "name": "applyTransforms",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "data",
                    "description": "The data to transform",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "data The transformed data object",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 121,
            "description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\n\nIt takes the type of the record that is being normalized\n(as a DS.Model class), the property where the hash was\noriginally found, and the hash to normalize.\n\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations.\n\nExample\n\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\n  normalize: function(type, hash) {\n    var fields = Ember.get(type, 'fields');\n    fields.forEach(function(field) {\n      var payloadField = Ember.String.underscore(field);\n      if (field === payloadField) { return; }\n\n      hash[field] = hash[payloadField];\n      delete hash[payloadField];\n    });\n    return this._super.apply(this, arguments);\n  }\n});\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 168,
            "description": "You can use this method to normalize all payloads, regardless of whether they\nrepresent single records or an array.\n\nFor example, you might want to remove some extraneous data from the payload:\n\n```js\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\n  normalizePayload: function(payload) {\n    delete payload.version;\n    delete payload.status;\n    return payload;\n  }\n});\n```",
            "itemtype": "method",
            "name": "normalizePayload",
            "params": [
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the normalized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 192,
            "itemtype": "method",
            "name": "normalizeAttributes",
            "access": "private",
            "tagname": "",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 211,
            "itemtype": "method",
            "name": "normalizeRelationships",
            "access": "private",
            "tagname": "",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 230,
            "itemtype": "method",
            "name": "normalizeUsingDeclaredMapping",
            "access": "private",
            "tagname": "",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 250,
            "itemtype": "method",
            "name": "normalizeId",
            "access": "private",
            "tagname": "",
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 263,
            "description": "Looks up the property key that was set by the custom `attr` mapping\npassed to the serializer.",
            "itemtype": "method",
            "name": "_getMappedKey",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "key",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 290,
            "description": "Check attrs.key.serialize property to inform if the `key`\ncan be serialized",
            "itemtype": "method",
            "name": "_canSerialize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the key can be serialized",
                "type": "Boolean"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 306,
            "description": "Called when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```javascript\nApp.Comment = DS.Model.extend({\n  title: DS.attr(),\n  body: DS.attr(),\n\n  author: DS.belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```javascript\n{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\n  serialize: function(post, options) {\n    var json = {\n      POST_TTL: post.get('title'),\n      POST_BDY: post.get('body'),\n      POST_CMS: post.get('comments').mapBy('id')\n    }\n\n    if (options.includeId) {\n      json.POST_ID_ = post.get('id');\n    }\n\n    return json;\n  }\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\n  serialize: function(record, options) {\n    var json = {};\n\n    record.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = record.get(name);\n    })\n\n    record.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = record.get(name).mapBy('id');\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = record.get('id');\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(name.singularize()) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```javascript\n{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\n  serialize: function(record, options) {\n    var json = this._super.apply(this, arguments);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 475,
            "description": "You can use this method to customize how a serialized record is added to the complete\nJSON hash to be sent to the server. By default the JSON Serializer does not namespace\nthe payload and just sends the raw serialized JSON object.\nIf your server expects namespaced keys, you should consider using the RESTSerializer.\nOtherwise you can override this method to customize how the record is added to the hash.\n\nFor example, your server may expect underscored root objects.\n\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\n  serializeIntoHash: function(data, type, record, options) {\n    var root = Ember.String.decamelize(type.typeKey);\n    data[root] = this.serialize(record, options);\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 503,
            "description": "`serializeAttribute` can be used to customize how `DS.attr`\nproperties are serialized\n\nFor example if you wanted to ensure all your attributes were always\nserialized as properties on an `attributes` object you could\nwrite:\n\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\n  serializeAttribute: function(record, json, key, attributes) {\n    json.attributes = json.attributes || {};\n    this._super(record, json.attributes, key, attributes);\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeAttribute",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "attribute",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 548,
            "description": "`serializeBelongsTo` can be used to customize how `DS.belongsTo`\nproperties are serialized.\n\nExample\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\n  serializeBelongsTo: function(record, json, relationship) {\n    var key = relationship.key;\n\n    var belongsTo = get(record, key);\n\n    key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\") : key;\n\n    json[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.toJSON();\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeBelongsTo",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 599,
            "description": "`serializeHasMany` can be used to customize how `DS.hasMany`\nproperties are serialized.\n\nExample\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\n  serializeHasMany: function(record, json, relationship) {\n    var key = relationship.key;\n    if (key === 'comments') {\n      return;\n    } else {\n      this._super.apply(this, arguments);\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeHasMany",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 645,
            "description": "You can use this method to customize how polymorphic objects are\nserialized. Objects are considered to be polymorphic if\n`{polymorphic: true}` is pass as the second argument to the\n`DS.belongsTo` function.\n\nExample\n\n```javascript\nApp.CommentSerializer = DS.JSONSerializer.extend({\n  serializePolymorphicType: function(record, json, relationship) {\n    var key = relationship.key,\n        belongsTo = get(record, key);\n    key = this.keyForAttribute ? this.keyForAttribute(key) : key;\n\n    if (Ember.isNone(belongsTo)) {\n      json[key + \"_type\"] = null;\n    } else {\n      json[key + \"_type\"] = belongsTo.constructor.typeKey;\n    }\n  }\n});\n   ```",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 678,
            "description": "The `extract` method is used to deserialize payload data from the\nserver. By default the `JSONSerializer` does not push the records\ninto the store. However records that subclass `JSONSerializer`\nsuch as the `RESTSerializer` may push records into the store as\npart of the extract call.\n\nThis method delegates to a more specific extract method based on\nthe `requestType`.\n\nExample\n\n```javascript\nvar get = Ember.get;\nsocket.on('message', function(message) {\n  var modelName = message.model;\n  var data = message.data;\n  var type = store.modelFor(modelName);\n  var serializer = store.serializerFor(type.typeKey);\n  var record = serializer.extract(store, type, data, get(data, 'id'), 'single');\n  store.push(modelName, record);\n});\n```",
            "itemtype": "method",
            "name": "extract",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "json The deserialized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 717,
            "description": "`extractFindAll` is a hook into the extract method used when a\ncall is made to `DS.Store#findAll`. By default this method is an\nalias for [extractArray](#method_extractArray).",
            "itemtype": "method",
            "name": "extractFindAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array An array of deserialized objects",
                "type": "Array"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 733,
            "description": "`extractFindQuery` is a hook into the extract method used when a\ncall is made to `DS.Store#findQuery`. By default this method is an\nalias for [extractArray](#method_extractArray).",
            "itemtype": "method",
            "name": "extractFindQuery",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array An array of deserialized objects",
                "type": "Array"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 749,
            "description": "`extractFindMany` is a hook into the extract method used when a\ncall is made to `DS.Store#findMany`. By default this method is\nalias for [extractArray](#method_extractArray).",
            "itemtype": "method",
            "name": "extractFindMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array An array of deserialized objects",
                "type": "Array"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 765,
            "description": "`extractFindHasMany` is a hook into the extract method used when a\ncall is made to `DS.Store#findHasMany`. By default this method is\nalias for [extractArray](#method_extractArray).",
            "itemtype": "method",
            "name": "extractFindHasMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array An array of deserialized objects",
                "type": "Array"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 782,
            "description": "`extractCreateRecord` is a hook into the extract method used when a\ncall is made to `DS.Store#createRecord`. By default this method is\nalias for [extractSave](#method_extractSave).",
            "itemtype": "method",
            "name": "extractCreateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "json The deserialized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 798,
            "description": "`extractUpdateRecord` is a hook into the extract method used when\na call is made to `DS.Store#update`. By default this method is alias\nfor [extractSave](#method_extractSave).",
            "itemtype": "method",
            "name": "extractUpdateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "json The deserialized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 814,
            "description": "`extractDeleteRecord` is a hook into the extract method used when\na call is made to `DS.Store#deleteRecord`. By default this method is\nalias for [extractSave](#method_extractSave).",
            "itemtype": "method",
            "name": "extractDeleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "json The deserialized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 831,
            "description": "`extractFind` is a hook into the extract method used when\na call is made to `DS.Store#find`. By default this method is\nalias for [extractSingle](#method_extractSingle).",
            "itemtype": "method",
            "name": "extractFind",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "json The deserialized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 847,
            "description": "`extractFindBelongsTo` is a hook into the extract method used when\na call is made to `DS.Store#findBelongsTo`. By default this method is\nalias for [extractSingle](#method_extractSingle).",
            "itemtype": "method",
            "name": "extractFindBelongsTo",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "json The deserialized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 863,
            "description": "`extractSave` is a hook into the extract method used when a call\nis made to `DS.Model#save`. By default this method is alias\nfor [extractSingle](#method_extractSingle).",
            "itemtype": "method",
            "name": "extractSave",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "json The deserialized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 880,
            "description": "`extractSingle` is used to deserialize a single record returned\nfrom the adapter.\n\nExample\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\n  extractSingle: function(store, type, payload) {\n    payload.comments = payload._embedded.comment;\n    delete payload._embedded;\n\n    return this._super(store, type, payload);\n  },\n});\n```",
            "itemtype": "method",
            "name": "extractSingle",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "json The deserialized payload",
                "type": "Object"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 910,
            "description": "`extractArray` is used to deserialize an array of records\nreturned from the adapter.\n\nExample\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\n  extractArray: function(store, type, payload) {\n    return payload.map(function(json) {\n      return this.extractSingle(store, type, json);\n    }, this);\n  }\n});\n```",
            "itemtype": "method",
            "name": "extractArray",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String or Number"
                },
                {
                    "name": "requestType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "array An array of deserialized objects",
                "type": "Array"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 943,
            "description": "`extractMeta` is used to deserialize any meta information in the\nadapter payload. By default Ember Data expects meta information to\nbe located on the `meta` property of the payload object.\n\nExample\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\n  extractMeta: function(store, type, payload) {\n    if (payload && payload._pagination) {\n      store.metaForType(type, payload._pagination);\n      delete payload._pagination;\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "extractMeta",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 973,
            "description": "`keyForAttribute` can be used to define rules for how to convert an\nattribute name in your model to a key in your JSON.\n\nExample\n\n```javascript\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\n  keyForAttribute: function(attr) {\n    return Ember.String.underscore(attr).toUpperCase();\n  }\n});\n```",
            "itemtype": "method",
            "name": "keyForAttribute",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized key",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 995,
            "description": "`keyForRelationship` can be used to define a custom key when\nserializing relationship properties. By default `JSONSerializer`\ndoes not provide an implementation of this method.\n\nExample\n\n ```javascript\n App.PostSerializer = DS.JSONSerializer.extend({\n   keyForRelationship: function(key, relationship) {\n      return 'rel_' + Ember.String.underscore(key);\n   }\n });\n ```",
            "itemtype": "method",
            "name": "keyForRelationship",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "relationship",
                    "description": "type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized key",
                "type": "String"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/json_serializer.js",
            "line": 1022,
            "itemtype": "method",
            "name": "transformFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "attributeType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "skipAssertion",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "transform",
                "type": "DS.Transform"
            },
            "class": "DS.JSONSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 58,
            "description": "If you want to do normalizations specific to some part of the payload, you\ncan specify those under `normalizeHash`.\n\nFor example, given the following json where the the `IDs` under\n`\"comments\"` are provided as `_id` instead of `id`.\n\n```javascript\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"comments\": [ 1, 2 ]\n  },\n  \"comments\": [{\n    \"_id\": 1,\n    \"body\": \"FIRST\"\n  }, {\n    \"_id\": 2,\n    \"body\": \"Rails is unagi\"\n  }]\n}\n```\n\nYou use `normalizeHash` to normalize just the comments:\n\n```javascript\nApp.PostSerializer = DS.RESTSerializer.extend({\n  normalizeHash: {\n    comments: function(hash) {\n      hash.id = hash._id;\n      delete hash._id;\n      return hash;\n    }\n  }\n});\n```\n\nThe key under `normalizeHash` is usually just the original key\nthat was in the original payload. However, key names will be\nimpacted by any modifications done in the `normalizePayload`\nmethod. The `DS.RESTSerializer`'s default implementation makes no\nchanges to the payload keys.",
            "itemtype": "property",
            "name": "normalizeHash",
            "type": "{Object}",
            "default": "undefined",
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 107,
            "description": "Normalizes a part of the JSON payload returned by\nthe server. You should override this method, munge the hash\nand call super if you have generic normalization to do.\n\nIt takes the type of the record that is being normalized\n(as a DS.Model class), the property where the hash was\noriginally found, and the hash to normalize.\n\nFor example, if you have a payload that looks like this:\n\n```js\n{\n  \"post\": {\n    \"id\": 1,\n    \"title\": \"Rails is omakase\",\n    \"comments\": [ 1, 2 ]\n  },\n  \"comments\": [{\n    \"id\": 1,\n    \"body\": \"FIRST\"\n  }, {\n    \"id\": 2,\n    \"body\": \"Rails is unagi\"\n  }]\n}\n```\n\nThe `normalize` method will be called three times:\n\n* With `App.Post`, `\"posts\"` and `{ id: 1, title: \"Rails is omakase\", ... }`\n* With `App.Comment`, `\"comments\"` and `{ id: 1, body: \"FIRST\" }`\n* With `App.Comment`, `\"comments\"` and `{ id: 2, body: \"Rails is unagi\" }`\n\nYou can use this method, for example, to normalize underscored keys to camelized\nor other general-purpose normalizations.\n\nIf you want to do normalizations specific to some part of the payload, you\ncan specify those under `normalizeHash`.\n\nFor example, if the `IDs` under `\"comments\"` are provided as `_id` instead of\n`id`, you can specify how to normalize just the comments:\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\n  normalizeHash: {\n    comments: function(hash) {\n      hash.id = hash._id;\n      delete hash._id;\n      return hash;\n    }\n  }\n});\n```\n\nThe key under `normalizeHash` is just the original key that was in the original\npayload.",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 187,
            "description": "Called when the server has returned a payload representing\na single record, such as in response to a `find` or `save`.\n\nIt is your opportunity to clean up the server's response into the normalized\nform expected by Ember Data.\n\nIf you want, you can just restructure the top-level of your payload, and\ndo more fine-grained normalization in the `normalize` method.\n\nFor example, if you have a payload like this in response to a request for\npost 1:\n\n```js\n{\n  \"id\": 1,\n  \"title\": \"Rails is omakase\",\n\n  \"_embedded\": {\n    \"comment\": [{\n      \"_id\": 1,\n      \"comment_title\": \"FIRST\"\n    }, {\n      \"_id\": 2,\n      \"comment_title\": \"Rails is unagi\"\n    }]\n  }\n}\n```\n\nYou could implement a serializer that looks like this to get your payload\ninto shape:\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\n  // First, restructure the top-level so it's organized by type\n  extractSingle: function(store, type, payload, id) {\n    var comments = payload._embedded.comment;\n    delete payload._embedded;\n\n    payload = { comments: comments, post: payload };\n    return this._super(store, type, payload, id);\n  },\n\n  normalizeHash: {\n    // Next, normalize individual comments, which (after `extract`)\n    // are now located under `comments`\n    comments: function(hash) {\n      hash.id = hash._id;\n      hash.title = hash.comment_title;\n      delete hash._id;\n      delete hash.comment_title;\n      return hash;\n    }\n  }\n})\n```\n\nWhen you call super from your own implementation of `extractSingle`, the\nbuilt-in implementation will find the primary record in your normalized\npayload and push the remaining records into the store.\n\nThe primary record is the single hash found under `post` or the first\nelement of the `posts` array.\n\nThe primary record has special meaning when the record is being created\nfor the first time or updated (`createRecord` or `updateRecord`). In\nparticular, it will update the properties of the record that was saved.",
            "itemtype": "method",
            "name": "extractSingle",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryType",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "recordId",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the primary response to the original request",
                "type": "Object"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 315,
            "description": "Called when the server has returned a payload representing\nmultiple records, such as in response to a `findAll` or `findQuery`.\n\nIt is your opportunity to clean up the server's response into the normalized\nform expected by Ember Data.\n\nIf you want, you can just restructure the top-level of your payload, and\ndo more fine-grained normalization in the `normalize` method.\n\nFor example, if you have a payload like this in response to a request for\nall posts:\n\n```js\n{\n  \"_embedded\": {\n    \"post\": [{\n      \"id\": 1,\n      \"title\": \"Rails is omakase\"\n    }, {\n      \"id\": 2,\n      \"title\": \"The Parley Letter\"\n    }],\n    \"comment\": [{\n      \"_id\": 1,\n      \"comment_title\": \"Rails is unagi\"\n      \"post_id\": 1\n    }, {\n      \"_id\": 2,\n      \"comment_title\": \"Don't tread on me\",\n      \"post_id\": 2\n    }]\n  }\n}\n```\n\nYou could implement a serializer that looks like this to get your payload\ninto shape:\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\n  // First, restructure the top-level so it's organized by type\n  // and the comments are listed under a post's `comments` key.\n  extractArray: function(store, type, payload) {\n    var posts = payload._embedded.post;\n    var comments = [];\n    var postCache = {};\n\n    posts.forEach(function(post) {\n      post.comments = [];\n      postCache[post.id] = post;\n    });\n\n    payload._embedded.comment.forEach(function(comment) {\n      comments.push(comment);\n      postCache[comment.post_id].comments.push(comment);\n      delete comment.post_id;\n    });\n\n    payload = { comments: comments, posts: payload };\n\n    return this._super(store, type, payload);\n  },\n\n  normalizeHash: {\n    // Next, normalize individual comments, which (after `extract`)\n    // are now located under `comments`\n    comments: function(hash) {\n      hash.id = hash._id;\n      hash.title = hash.comment_title;\n      delete hash._id;\n      delete hash.comment_title;\n      return hash;\n    }\n  }\n})\n```\n\nWhen you call super from your own implementation of `extractArray`, the\nbuilt-in implementation will find the primary array in your normalized\npayload and push the remaining records into the store.\n\nThe primary array is the array found under `posts`.\n\nThe primary record has special meaning when responding to `findQuery`\nor `findHasMany`. In particular, the primary array will become the\nlist of records in the record array that kicked off the request.\n\nIf your primary array contains secondary (embedded) records of the same type,\nyou cannot place these into the primary array `posts`. Instead, place the\nsecondary items into an underscore prefixed property `_posts`, which will\npush these items into the store and will not affect the resulting query.",
            "itemtype": "method",
            "name": "extractArray",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "primaryType",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The primary array that was returned in response\n  to the original query.",
                "type": "Array"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 453,
            "description": "This method allows you to push a payload containing top-level\ncollections of records organized per type.\n\n```js\n{\n  \"posts\": [{\n    \"id\": \"1\",\n    \"title\": \"Rails is omakase\",\n    \"author\", \"1\",\n    \"comments\": [ \"1\" ]\n  }],\n  \"comments\": [{\n    \"id\": \"1\",\n    \"body\": \"FIRST\"\n  }],\n  \"users\": [{\n    \"id\": \"1\",\n    \"name\": \"@d2h\"\n  }]\n}\n```\n\nIt will first normalize the payload, so you can use this to push\nin data streaming in from your server structured the same way\nthat fetches and saves are structured.",
            "itemtype": "method",
            "name": "pushPayload",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 505,
            "description": "This method is used to convert each JSON root key in the payload\ninto a typeKey that it can use to look up the appropriate model for\nthat part of the payload. By default the typeKey for a model is its\nname in camelCase, so if your JSON root key is 'fast-car' you would\nuse typeForRoot to convert it to 'fastCar' so that Ember Data finds\nthe `FastCar` model.\n\nIf you diverge from this norm you should also consider changes to\nstore._normalizeTypeKey as well.\n\nFor example, your server may return prefixed root keys like so:\n\n```js\n{\n  \"response-fast-car\": {\n    \"id\": \"1\",\n    \"name\": \"corvette\"\n  }\n}\n```\n\nIn order for Ember Data to know that the model corresponding to\nthe 'response-fast-car' hash is `FastCar` (typeKey: 'fastCar'),\nyou can override typeForRoot to convert 'response-fast-car' to\n'fastCar' like so:\n\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\n  typeForRoot: function(root) {\n    // 'response-fast-car' should become 'fast-car'\n    var subRoot = root.substring(9);\n\n    // _super normalizes 'fast-car' to 'fastCar'\n    return this._super(subRoot);\n  }\n});\n```",
            "itemtype": "method",
            "name": "typeForRoot",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the model's typeKey",
                "type": "String"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 554,
            "description": "Called when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```js\nApp.Comment = DS.Model.extend({\n  title: DS.attr(),\n  body: DS.attr(),\n\n  author: DS.belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```js\n{\n  \"title\": \"Rails is unagi\",\n  \"body\": \"Rails? Omakase? O_O\",\n  \"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\n  serialize: function(post, options) {\n    var json = {\n      POST_TTL: post.get('title'),\n      POST_BDY: post.get('body'),\n      POST_CMS: post.get('comments').mapBy('id')\n    }\n\n    if (options.includeId) {\n      json.POST_ID_ = post.get('id');\n    }\n\n    return json;\n  }\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\n  serialize: function(record, options) {\n    var json = {};\n\n    record.eachAttribute(function(name) {\n      json[serverAttributeName(name)] = record.get(name);\n    })\n\n    record.eachRelationship(function(name, relationship) {\n      if (relationship.kind === 'hasMany') {\n        json[serverHasManyName(name)] = record.get(name).mapBy('id');\n      }\n    });\n\n    if (options.includeId) {\n      json.ID_ = record.get('id');\n    }\n\n    return json;\n  }\n});\n\nfunction serverAttributeName(attribute) {\n  return attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\n  return serverAttributeName(name.singularize()) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```js\n{\n  \"TITLE\": \"Rails is omakase\",\n  \"BODY\": \"Yep. Omakase.\",\n  \"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\n  serialize: function(record, options) {\n    var json = this._super(record, options);\n\n    json.subject = json.title;\n    delete json.title;\n\n    return json;\n  }\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "json",
                "type": "Object"
            },
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 701,
            "description": "You can use this method to customize the root keys serialized into the JSON.\nBy default the REST Serializer sends the typeKey of a model, which is a camelized\nversion of the name.\n\nFor example, your server may expect underscored root objects.\n\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\n  serializeIntoHash: function(data, type, record, options) {\n    var root = Ember.String.decamelize(type.typeKey);\n    data[root] = this.serialize(record, options);\n  }\n});\n```",
            "itemtype": "method",
            "name": "serializeIntoHash",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/serializers/rest_serializer.js",
            "line": 727,
            "description": "You can use this method to customize how polymorphic objects are serialized.\nBy default the JSON Serializer creates the key by appending `Type` to\nthe attribute and value from the model's camelcased model name.",
            "itemtype": "method",
            "name": "serializePolymorphicType",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.RESTSerializer",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/debug/debug_info.js",
            "line": 5,
            "description": "Provides info about the model for debugging purposes\nby grouping the properties into more semantic groups.\n\nMeant to be used by debugging tools such as the Chrome Ember Extension.\n\n- Groups all attributes in \"Attributes\" group.\n- Groups all belongsTo relationships in \"Belongs To\" group.\n- Groups all hasMany relationships in \"Has Many\" group.\n- Groups all flags in \"Flags\" group.\n- Flags relationship CPs as expensive properties.",
            "itemtype": "method",
            "name": "_debugInfo",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/attributes.js",
            "line": 17,
            "description": "A map whose keys are the attributes of the model (properties\ndescribed by DS.attr) and whose values are the meta object for the\nproperty.\n\nExample\n\n```javascript\n\nApp.Person = DS.Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nvar attributes = Ember.get(App.Person, 'attributes')\n\nattributes.forEach(function(name, meta) {\n  console.log(name, meta);\n});\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```",
            "itemtype": "property",
            "name": "attributes",
            "static": 1,
            "type": "{Ember.Map}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/attributes.js",
            "line": 64,
            "description": "A map whose keys are the attributes of the model (properties\ndescribed by DS.attr) and whose values are type of transformation\napplied to each attribute. This map does not include any\nattributes that do not have an transformation type.\n\nExample\n\n```javascript\nApp.Person = DS.Model.extend({\n  firstName: attr(),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nvar transformedAttributes = Ember.get(App.Person, 'transformedAttributes')\n\ntransformedAttributes.forEach(function(field, type) {\n  console.log(field, type);\n});\n\n// prints:\n// lastName string\n// birthday date\n```",
            "itemtype": "property",
            "name": "transformedAttributes",
            "static": 1,
            "type": "{Ember.Map}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/attributes.js",
            "line": 107,
            "description": "Iterates through the attributes of the model, calling the passed function on each\nattribute.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, meta);\n```\n\n- `name` the name of the current property in the iteration\n- `meta` the meta object for the attribute property in the iteration\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nApp.Person = DS.Model.extend({\n  firstName: attr('string'),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nApp.Person.eachAttribute(function(name, meta) {\n  console.log(name, meta);\n});\n\n// prints:\n// firstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\n// lastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\n// birthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n   ```",
            "itemtype": "method",
            "name": "eachAttribute",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/attributes.js",
            "line": 154,
            "description": "Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, type);\n```\n\n- `name` the name of the current property in the iteration\n- `type` a string containing the name of the type of transformed\n  applied to the attribute\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nApp.Person = DS.Model.extend({\n  firstName: attr(),\n  lastName: attr('string'),\n  birthday: attr('date')\n});\n\nApp.Person.eachTransformedAttribute(function(name, type) {\n  console.log(name, type);\n});\n\n// prints:\n// lastName string\n// birthday date\n   ```",
            "itemtype": "method",
            "name": "eachTransformedAttribute",
            "params": [
                {
                    "name": "callback",
                    "description": "The callback to execute",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "The target object to use",
                    "type": "Object",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/attributes.js",
            "line": 234,
            "description": "`DS.attr` defines an attribute on a [DS.Model](/api/data/classes/DS.Model.html).\nBy default, attributes are passed through as-is, however you can specify an\noptional type to have the value automatically transformed.\nEmber Data ships with four basic transform types: `string`, `number`,\n`boolean` and `date`. You can define your own transforms by subclassing\n[DS.Transform](/api/data/classes/DS.Transform.html).\n\nNote that you cannot use `attr` to define an attribute of `id`.\n\n`DS.attr` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `defaultValue`: Pass a string or a function to be called to set the attribute\n                  to a default value if none is supplied.\n\nExample\n\n```javascript\nvar attr = DS.attr;\n\nApp.User = DS.Model.extend({\n  username: attr('string'),\n  email: attr('string'),\n  verified: attr('boolean', {defaultValue: false})\n});\n```",
            "itemtype": "method",
            "name": "attr",
            "params": [
                {
                    "name": "type",
                    "description": "the attribute type",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Attribute"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 85,
            "description": "Register with target handler",
            "itemtype": "method",
            "name": "registerHandlers",
            "params": [
                {
                    "name": "target",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "becameInvalid",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "becameValid",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 98,
            "itemtype": "property",
            "name": "errorsByAttributeName",
            "type": "{Ember.MapWithDefault}",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 125,
            "description": "Returns errors for a given attribute\n\n```javascript\nvar user = store.createRecord('user', {\n  username: 'tomster',\n  email: 'invalidEmail'\n});\nuser.save().catch(function(){\n  user.get('errors').errorsFor('email'); // [\"Doesn't look like a valid email.\"]\n});\n```",
            "itemtype": "method",
            "name": "errorsFor",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 146,
            "description": "An array containing all of the error messages for this\nrecord. This is useful for displaying all errors to the user.\n\n```handlebars\n{{#each errors.messages}}\n  <div class=\"error\">\n    {{message}}\n  </div>\n{{/each}}\n```",
            "itemtype": "property",
            "name": "messages",
            "type": "{Array}",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 163,
            "itemtype": "property",
            "name": "content",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 172,
            "itemtype": "method",
            "name": "unknownProperty",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 182,
            "itemtype": "method",
            "name": "nextObject",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 190,
            "description": "Total number of errors.",
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "readonly": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 199,
            "itemtype": "property",
            "name": "isEmpty",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 206,
            "description": "Adds error messages to a given attribute and sends\n`becameInvalid` event to the record.\n\nExample:\n\n```javascript\nif (!user.get('username') {\n  user.get('errors').add('username', 'This field is required');\n}\n```",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "messages",
                    "description": "",
                    "type": "Array|String"
                }
            ],
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 236,
            "itemtype": "method",
            "name": "_findOrCreateMessages",
            "access": "private",
            "tagname": "",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 251,
            "description": "Removes all error messages from the given attribute and sends\n`becameValid` event to the record if there no more errors left.\n\nExample:\n\n```javascript\nApp.User = DS.Model.extend({\n  email: DS.attr('string'),\n  twoFactorAuth: DS.attr('boolean'),\n  phone: DS.attr('string')\n});\n\nApp.UserEditRoute = Ember.Route.extend({\n  actions: {\n    save: function(user) {\n       if (!user.get('twoFactorAuth')) {\n         user.get('errors').remove('phone');\n       }\n       user.save();\n     }\n  }\n});\n```",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 293,
            "description": "Removes all error messages and sends `becameValid` event\nto the record.\n\nExample:\n\n```javascript\nApp.UserEditRoute = Ember.Route.extend({\n  actions: {\n    retrySave: function(user) {\n       user.get('errors').clear();\n       user.save();\n     }\n  }\n});\n```",
            "itemtype": "method",
            "name": "clear",
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/errors.js",
            "line": 321,
            "description": "Checks if there is error messages for the given attribute.\n\n```javascript\nApp.UserEditRoute = Ember.Route.extend({\n  actions: {\n    save: function(user) {\n       if (user.get('errors').has('email')) {\n         return alert('Please update your email before attempting to save.');\n       }\n       user.save();\n     }\n  }\n});\n```",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "attribute",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if there some errors on given attribute",
                "type": "Boolean"
            },
            "class": "DS.Errors",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 50,
            "description": "If this property is `true` the record is in the `empty`\nstate. Empty is the first state all records enter after they have\nbeen created. Most records created by the store will quickly\ntransition to the `loading` state if data needs to be fetched from\nthe server or the `created` state if the record is created on the\nclient. A record can also enter the empty state if the adapter is\nunable to locate the record.",
            "itemtype": "property",
            "name": "isEmpty",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 64,
            "description": "If this property is `true` the record is in the `loading` state. A\nrecord enters this state when the store asks the adapter for its\ndata. It remains in this state until the adapter provides the\nrequested data.",
            "itemtype": "property",
            "name": "isLoading",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 75,
            "description": "If this property is `true` the record is in the `loaded` state. A\nrecord enters this state when its data is populated. Most of a\nrecord's lifecycle is spent inside substates of the `loaded`\nstate.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isLoaded'); // true\n\nstore.find('model', 1).then(function(model) {\n  model.get('isLoaded'); // true\n});\n```",
            "itemtype": "property",
            "name": "isLoaded",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 97,
            "description": "If this property is `true` the record is in the `dirty` state. The\nrecord has local changes that have not yet been saved by the\nadapter. This includes records that have been created (but not yet\nsaved) or deleted.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isDirty'); // true\n\nstore.find('model', 1).then(function(model) {\n  model.get('isDirty'); // false\n  model.set('foo', 'some value');\n  model.get('isDirty'); // true\n});\n```",
            "itemtype": "property",
            "name": "isDirty",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 121,
            "description": "If this property is `true` the record is in the `saving` state. A\nrecord enters the saving state when `save` is called, but the\nadapter has not yet acknowledged that the changes have been\npersisted to the backend.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isSaving'); // false\nvar promise = record.save();\nrecord.get('isSaving'); // true\npromise.then(function() {\n  record.get('isSaving'); // false\n});\n```",
            "itemtype": "property",
            "name": "isSaving",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 144,
            "description": "If this property is `true` the record is in the `deleted` state\nand has been marked for deletion. When `isDeleted` is true and\n`isDirty` is true, the record is deleted locally but the deletion\nwas not yet persisted. When `isSaving` is true, the change is\nin-flight. When both `isDirty` and `isSaving` are false, the\nchange has persisted.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isDeleted');    // false\nrecord.deleteRecord();\n\n// Locally deleted\nrecord.get('isDeleted');    // true\nrecord.get('isDirty');      // true\nrecord.get('isSaving');     // false\n\n// Persisting the deletion\nvar promise = record.save();\nrecord.get('isDeleted');    // true\nrecord.get('isSaving');     // true\n\n// Deletion Persisted\npromise.then(function() {\n  record.get('isDeleted');  // true\n  record.get('isSaving');   // false\n  record.get('isDirty');    // false\n});\n```",
            "itemtype": "property",
            "name": "isDeleted",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 182,
            "description": "If this property is `true` the record is in the `new` state. A\nrecord will be in the `new` state when it has been created on the\nclient and the adapter has not yet report that it was successfully\nsaved.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('isNew'); // true\n\nrecord.save().then(function(model) {\n  model.get('isNew'); // false\n});\n```",
            "itemtype": "property",
            "name": "isNew",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 204,
            "description": "If this property is `true` the record is in the `valid` state.\n\nA record will be in the `valid` state when the adapter did not report any\nserver-side validation failures.",
            "itemtype": "property",
            "name": "isValid",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 215,
            "description": "If the record is in the dirty state this property will report what\nkind of change has caused it to move into the dirty\nstate. Possible values are:\n\n- `created` The record has been created by the client and not yet saved to the adapter.\n- `updated` The record has been updated by the client and not yet saved to the adapter.\n- `deleted` The record has been deleted by the client and not yet saved to the adapter.\n\nExample\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('dirtyType'); // 'created'\n```",
            "itemtype": "property",
            "name": "dirtyType",
            "type": "{String}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 237,
            "description": "If `true` the adapter reported that it was unable to save local\nchanges to the backend for any reason other than a server-side\nvalidation error.\n\nExample\n\n```javascript\nrecord.get('isError'); // false\nrecord.set('foo', 'valid value');\nrecord.save().then(null, function() {\n  record.get('isError'); // true\n});\n```",
            "itemtype": "property",
            "name": "isError",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 257,
            "description": "If `true` the store is attempting to reload the record form the adapter.\n\nExample\n\n```javascript\nrecord.get('isReloading'); // false\nrecord.reload();\nrecord.get('isReloading'); // true\n```",
            "itemtype": "property",
            "name": "isReloading",
            "type": "{Boolean}",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 274,
            "description": "The `clientId` property is a transient numerical identifier\ngenerated at runtime by the data store. It is important\nprimarily because newly created objects may not yet have an\nexternally generated id.",
            "itemtype": "property",
            "name": "clientId",
            "access": "private",
            "tagname": "",
            "type": "{Number|String}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 285,
            "description": "All ember models have an id property. This is an identifier\nmanaged by an external source. These are always coerced to be\nstrings before being used internally. Note when declaring the\nattributes for a model it is an error to declare an id\nattribute.\n\n```javascript\nvar record = store.createRecord('model');\nrecord.get('id'); // null\n\nstore.find('model', 1).then(function(model) {\n  model.get('id'); // '1'\n});\n```",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 306,
            "itemtype": "property",
            "name": "currentState",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 313,
            "description": "When the record is in the `invalid` state this object will contain\nany errors returned by the adapter. When present the errors hash\ntypically contains keys corresponding to the invalid property names\nand values which are an array of error messages.\n\n```javascript\nrecord.get('errors.length'); // 0\nrecord.set('foo', 'invalid value');\nrecord.save().then(null, function() {\n  record.get('errors').get('foo'); // ['foo should be a number.']\n});\n```",
            "itemtype": "property",
            "name": "errors",
            "type": "{DS.Errors}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 342,
            "description": "Create a JSON representation of the record, using the serialization\nstrategy of the store's adapter.\n\n   `serialize` takes an optional hash as a parameter, currently\nsupported options are:\n\n   - `includeId`: `true` if the record's ID should be included in the\n  JSON representation.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "an object whose values are primitive JSON values only",
                "type": "Object"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 361,
            "description": "Use [DS.JSONSerializer](DS.JSONSerializer.html) to\nget the JSON representation of a record.\n\n`toJSON` takes an optional hash as a parameter, currently\nsupported options are:\n\n- `includeId`: `true` if the record's ID should be included in the\n  JSON representation.",
            "itemtype": "method",
            "name": "toJSON",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A JSON representation of the object.",
                "type": "Object"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 382,
            "description": "Fired when the record is loaded from the server.",
            "itemtype": "event",
            "name": "didLoad",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 389,
            "description": "Fired when the record is updated.",
            "itemtype": "event",
            "name": "didUpdate",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 396,
            "description": "Fired when the record is created.",
            "itemtype": "event",
            "name": "didCreate",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 403,
            "description": "Fired when the record is deleted.",
            "itemtype": "event",
            "name": "didDelete",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 410,
            "description": "Fired when the record becomes invalid.",
            "itemtype": "event",
            "name": "becameInvalid",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 417,
            "description": "Fired when the record enters the error state.",
            "itemtype": "event",
            "name": "becameError",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 424,
            "itemtype": "property",
            "name": "data",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 477,
            "itemtype": "method",
            "name": "send",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 493,
            "itemtype": "method",
            "name": "transitionTo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 551,
            "itemtype": "method",
            "name": "loadingData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "promise",
                    "description": "",
                    "type": "Promise"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 560,
            "itemtype": "method",
            "name": "loadedData",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 568,
            "itemtype": "method",
            "name": "notFound",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 576,
            "itemtype": "method",
            "name": "pushedData",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 584,
            "description": "Marks the record as deleted but does not save it. You must call\n`save` afterwards if you want to persist it. You might use this\nmethod if you want to allow the user to still `rollback()` a\ndelete after it was made.\n\nExample\n\n```javascript\nApp.ModelDeleteRoute = Ember.Route.extend({\n  actions: {\n    softDelete: function() {\n      this.controller.get('model').deleteRecord();\n    },\n    confirm: function() {\n      this.controller.get('model').save();\n    },\n    undo: function() {\n      this.controller.get('model').rollback();\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 614,
            "description": "Same as `deleteRecord`, but saves the record immediately.\n\nExample\n\n```javascript\nApp.ModelDeleteRoute = Ember.Route.extend({\n  actions: {\n    delete: function() {\n      var controller = this.controller;\n      controller.get('model').destroyRecord().then(function() {\n        controller.transitionToRoute('model.index');\n      });\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "destroyRecord",
            "return": {
                "description": "a promise that will be resolved when the adapter returns\nsuccessfully or rejected if the adapter returns with an error.",
                "type": "Promise"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 641,
            "itemtype": "method",
            "name": "unloadRecord",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 651,
            "itemtype": "method",
            "name": "clearRelationships",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 687,
            "itemtype": "method",
            "name": "updateRecordArrays",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 696,
            "description": "When a find request is triggered on the store, the user can optionally pass in\nattributes and relationships to be preloaded. These are meant to behave as if they\ncame back from the server, except the user obtained them out of band and is informing\nthe store of their existence. The most common use case is for supporting client side\nnested URLs, such as `/posts/1/comments/2` so the user can do\n`store.find('comment', 2, {post:1})` without having to fetch the post.\n\nPreloaded data can be attributes and relationships passed in either as IDs or as actual\nmodels.",
            "itemtype": "method",
            "name": "_preloadData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "preload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 762,
            "description": "Returns an object, whose keys are changed properties, and value is\nan [oldProp, newProp] array.\n\nExample\n\n```javascript\nApp.Mascot = DS.Model.extend({\n  name: attr('string')\n});\n\nvar person = store.createRecord('person');\nperson.changedAttributes(); // {}\nperson.set('name', 'Tomster');\nperson.changedAttributes(); // {name: [undefined, 'Tomster']}\n```",
            "itemtype": "method",
            "name": "changedAttributes",
            "return": {
                "description": "an object, whose keys are changed properties,\n  and value is an [oldProp, newProp] array.",
                "type": "Object"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 796,
            "itemtype": "method",
            "name": "adapterWillCommit",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 804,
            "description": "If the adapter did not return a hash in response to a commit,\nmerge the changed attributes and relationships into the existing\nsaved data.",
            "itemtype": "method",
            "name": "adapterDidCommit",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 830,
            "itemtype": "method",
            "name": "adapterDidDirty",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 840,
            "itemtype": "method",
            "name": "updateRecordArraysLater",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 852,
            "itemtype": "method",
            "name": "setupData",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "partial",
                    "description": "the data should be merged into\n  the existing data, not replace it.",
                    "type": "Boolean"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 884,
            "description": "If the model `isDirty` this function will discard any unsaved\nchanges\n\nExample\n\n```javascript\nrecord.get('name'); // 'Untitled Document'\nrecord.set('name', 'Doc 1');\nrecord.get('name'); // 'Doc 1'\nrecord.rollback();\nrecord.get('name'); // 'Untitled Document'\n```",
            "itemtype": "method",
            "name": "rollback",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 928,
            "description": "Save the record and persist any changes to the record to an\nexternal source via the adapter.\n\nExample\n\n```javascript\nrecord.set('name', 'Tomster');\nrecord.save().then(function(){\n  // Success callback\n}, function() {\n  // Error callback\n});\n```",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "a promise that will be resolved when the adapter returns\nsuccessfully or rejected if the adapter returns with an error.",
                "type": "Promise"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 959,
            "description": "Reload the record from the adapter.\n\nThis will only work if the record has already finished loading\nand has not yet been modified (`isLoaded` but not `isDirty`,\nor `isSaving`).\n\nExample\n\n```javascript\nApp.ModelViewRoute = Ember.Route.extend({\n  actions: {\n    reload: function() {\n      this.controller.get('model').reload();\n    }\n  }\n});\n```",
            "itemtype": "method",
            "name": "reload",
            "return": {
                "description": "a promise that will be resolved with the record when the\nadapter returns successfully or rejected if the adapter returns\nwith an error.",
                "type": "Promise"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 1024,
            "itemtype": "method",
            "name": "adapterDidInvalidate",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 1040,
            "itemtype": "method",
            "name": "adapterDidError",
            "access": "private",
            "tagname": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 1049,
            "description": "Override the default event firing from Ember.Evented to\nalso call methods with the given name.",
            "itemtype": "method",
            "name": "trigger",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 1105,
            "description": "Alias DS.Model's `create` method to `_create`. This allows us to create DS.Model\ninstances from within the store, but if end users accidentally call `create()`\n(instead of `createRecord()`), we can raise an error.",
            "itemtype": "method",
            "name": "_create",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/model/model.js",
            "line": 1116,
            "description": "Override the class' `create()` method to raise an error. This\nprevents end users from inadvertently calling `create()` instead\nof `createRecord()`. The store is still able to create instances\nby calling the `_create()` method. To create an instance of a\n`DS.Model` use [store.createRecord](DS.Store.html#method_createRecord).",
            "itemtype": "method",
            "name": "create",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/adapter_populated_record_array.js",
            "line": 34,
            "itemtype": "method",
            "name": "load",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "DS.AdapterPopulatedRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/filtered_record_array.js",
            "line": 20,
            "description": "The filterFunction is a function used to test records from the store to\ndetermine if they should be part of the record array.\n\nExample\n\n```javascript\nvar allPeople = store.all('person');\nallPeople.mapBy('name'); // [\"Tom Dale\", \"Yehuda Katz\", \"Trek Glowacki\"]\n\nvar people = store.filter('person', function(person) {\n  if (person.get('name').match(/Katz$/)) { return true; }\n});\npeople.mapBy('name'); // [\"Yehuda Katz\"]\n\nvar notKatzFilter = function(person) {\n  return !person.get('name').match(/Katz$/);\n};\npeople.set('filterFunction', notKatzFilter);\npeople.mapBy('name'); // [\"Tom Dale\", \"Trek Glowacki\"]\n```",
            "itemtype": "method",
            "name": "filterFunction",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "`true` if the record should be in the array",
                "type": "Boolean"
            },
            "class": "DS.FilteredRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/filtered_record_array.js",
            "line": 54,
            "itemtype": "method",
            "name": "updateFilter",
            "access": "private",
            "tagname": "",
            "class": "DS.FilteredRecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "line": 50,
            "description": "`true` if the relationship is polymorphic, `false` otherwise.",
            "itemtype": "property",
            "name": "isPolymorphic",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "line": 62,
            "description": "The relationship which manages this array.",
            "itemtype": "property",
            "name": "owner",
            "type": "DS.Model",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "line": 72,
            "description": "Used for async `hasMany` arrays\nto keep track of when they will resolve.",
            "itemtype": "property",
            "name": "promise",
            "type": "Ember.RSVP.Promise",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "line": 81,
            "itemtype": "method",
            "name": "loadingRecordsCount",
            "params": [
                {
                    "name": "count",
                    "description": "",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "line": 90,
            "itemtype": "method",
            "name": "loadedRecord",
            "access": "private",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "line": 112,
            "itemtype": "method",
            "name": "reload",
            "access": "public",
            "tagname": "",
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/many_array.js",
            "line": 120,
            "description": "Create a child record within the owner",
            "itemtype": "method",
            "name": "createRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "hash",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.ManyArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 22,
            "description": "The model type contained by this record array.",
            "itemtype": "property",
            "name": "type",
            "type": "DS.Model",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 30,
            "description": "The array of client ids backing the record array. When a\nrecord is requested from the record array, the record\nfor the client id at the same index is materialized, if\nnecessary, by the store.",
            "itemtype": "property",
            "name": "content",
            "access": "private",
            "tagname": "",
            "type": "Ember.Array",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 42,
            "description": "The flag to signal a `RecordArray` is currently loading data.\n\nExample\n\n```javascript\nvar people = store.all('person');\npeople.get('isLoaded'); // true\n```",
            "itemtype": "property",
            "name": "isLoaded",
            "type": "Boolean",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 56,
            "description": "The flag to signal a `RecordArray` is currently loading data.\n\nExample\n\n```javascript\nvar people = store.all('person');\npeople.get('isUpdating'); // false\npeople.update();\npeople.get('isUpdating'); // true\n```",
            "itemtype": "property",
            "name": "isUpdating",
            "type": "Boolean",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 73,
            "description": "The store that created this record array.",
            "itemtype": "property",
            "name": "store",
            "access": "private",
            "tagname": "",
            "type": "DS.Store",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 82,
            "description": "Retrieves an object from the content by index.",
            "itemtype": "method",
            "name": "objectAtContent",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 96,
            "description": "Used to get the latest version of all of the records in this array\nfrom the adapter.\n\nExample\n\n```javascript\nvar people = store.all('person');\npeople.get('isUpdating'); // false\npeople.update();\npeople.get('isUpdating'); // true\n```",
            "itemtype": "method",
            "name": "update",
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 120,
            "description": "Adds a record to the `RecordArray` without duplicates",
            "itemtype": "method",
            "name": "addRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "an",
                    "description": "optional index to insert at",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 139,
            "description": "Adds a record to the `RecordArray`, but allows duplicates",
            "itemtype": "method",
            "name": "pushRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 151,
            "description": "Removes a record to the `RecordArray`.",
            "itemtype": "method",
            "name": "removeRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_arrays/record_array.js",
            "line": 162,
            "description": "Saves all of the records in the `RecordArray`.\n\nExample\n\n```javascript\nvar messages = store.all('message');\nmessages.forEach(function(message) {\n  message.set('hasBeenSeen', true);\n});\nmessages.save();\n```",
            "itemtype": "method",
            "name": "save",
            "return": {
                "description": "promise",
                "type": "DS.PromiseArray"
            },
            "class": "DS.RecordArray",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/belongs_to.js",
            "line": 4,
            "description": "`DS.belongsTo` is used to define One-To-One and One-To-Many\nrelationships on a [DS.Model](/api/data/classes/DS.Model.html).\n\n\n`DS.belongsTo` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship.\n- `inverse`: A string used to identify the inverse property on a\n  related model in a One-To-Many relationship. See [Explicit Inverses](#toc_explicit-inverses)\n\n#### One-To-One\nTo declare a one-to-one relationship between two models, use\n`DS.belongsTo`:\n\n```javascript\nApp.User = DS.Model.extend({\n  profile: DS.belongsTo('profile')\n});\n\nApp.Profile = DS.Model.extend({\n  user: DS.belongsTo('user')\n});\n```\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`DS.belongsTo` in combination with `DS.hasMany`, like this:\n\n```javascript\nApp.Post = DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n\nApp.Comment = DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n```",
            "itemtype": "method",
            "name": "belongsTo",
            "params": [
                {
                    "name": "type",
                    "description": "the model type of the relationship",
                    "type": "String or DS.Model"
                },
                {
                    "name": "options",
                    "description": "a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "relationship",
                "type": "Ember.computed"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 29,
            "description": "This Ember.js hook allows an object to be notified when a property\nis defined.\n\nIn this case, we use it to be notified when an Ember Data user defines a\nbelongs-to relationship. In that case, we need to set up observers for\neach one, allowing us to track relationship changes and automatically\nreflect changes in the inverse has-many array.\n\nThis hook passes the class being set up, as well as the key and value\nbeing defined. So, for example, when the user does this:\n\n```javascript\nDS.Model.extend({\n  parent: DS.belongsTo('user')\n});\n```\n\nThis hook would be called with \"parent\" as the key and the computed\nproperty returned by `DS.belongsTo` as the value.",
            "itemtype": "method",
            "name": "didDefineProperty",
            "params": [
                {
                    "name": "proto",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Ember.ComputedProperty"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 88,
            "description": "For a given relationship name, returns the model type of the relationship.\n\nFor example, if you define a model like this:\n\n   ```javascript\nApp.Post = DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n   ```\n\nCalling `App.Post.typeForRelationship('comments')` will return `App.Comment`.",
            "itemtype": "method",
            "name": "typeForRelationship",
            "static": 1,
            "params": [
                {
                    "name": "name",
                    "description": "the name of the relationship",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the type of the relationship, or undefined",
                "type": "subclass of DS.Model"
            },
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 236,
            "description": "The model's relationships as a map, keyed on the type of the\nrelationship. The value of each entry is an array containing a descriptor\nfor each relationship with that type, describing the name of the relationship\nas well as the type.\n\nFor example, given the following model definition:\n\n```javascript\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n  posts: DS.hasMany('post')\n});\n```\n\nThis computed property would return a map describing these\nrelationships, like this:\n\n```javascript\nvar relationships = Ember.get(App.Blog, 'relationships');\nrelationships.get(App.User);\n//=> [ { name: 'users', kind: 'hasMany' },\n//     { name: 'owner', kind: 'belongsTo' } ]\nrelationships.get(App.Post);\n//=> [ { name: 'posts', kind: 'hasMany' } ]\n```",
            "itemtype": "property",
            "name": "relationships",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 292,
            "description": "A hash containing lists of the model's relationships, grouped\nby the relationship kind. For example, given a model with this\ndefinition:\n\n```javascript\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nvar relationshipNames = Ember.get(App.Blog, 'relationshipNames');\nrelationshipNames.hasMany;\n//=> ['users', 'posts']\nrelationshipNames.belongsTo;\n//=> ['owner']\n```",
            "itemtype": "property",
            "name": "relationshipNames",
            "static": 1,
            "type": "Object",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 336,
            "description": "An array of types directly related to a model. Each type will be\nincluded once, regardless of the number of relationships it has with\nthe model.\n\nFor example, given a model with this definition:\n\n```javascript\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nvar relatedTypes = Ember.get(App.Blog, 'relatedTypes');\n//=> [ App.User, App.Post ]\n```",
            "itemtype": "property",
            "name": "relatedTypes",
            "static": 1,
            "type": "Ember.Array",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 388,
            "description": "A map whose keys are the relationships of a model and whose values are\nrelationship descriptors.\n\nFor example, given a model with this\ndefinition:\n\n```javascript\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post')\n});\n```\n\nThis property would contain the following:\n\n```javascript\nvar relationshipsByName = Ember.get(App.Blog, 'relationshipsByName');\nrelationshipsByName.get('users');\n//=> { key: 'users', kind: 'hasMany', type: App.User }\nrelationshipsByName.get('owner');\n//=> { key: 'owner', kind: 'belongsTo', type: App.User }\n```",
            "itemtype": "property",
            "name": "relationshipsByName",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 434,
            "description": "A map whose keys are the fields of the model and whose values are strings\ndescribing the kind of the field. A model's fields are the union of all of its\nattributes and relationships.\n\nFor example:\n\n```javascript\n\nApp.Blog = DS.Model.extend({\n  users: DS.hasMany('user'),\n  owner: DS.belongsTo('user'),\n\n  posts: DS.hasMany('post'),\n\n  title: DS.attr('string')\n});\n\nvar fields = Ember.get(App.Blog, 'fields');\nfields.forEach(function(field, kind) {\n  console.log(field, kind);\n});\n\n// prints:\n// users, hasMany\n// owner, belongsTo\n// posts, hasMany\n// title, attribute\n```",
            "itemtype": "property",
            "name": "fields",
            "static": 1,
            "type": "Ember.Map",
            "readonly": "",
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 483,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
            "itemtype": "method",
            "name": "eachRelationship",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 499,
            "description": "Given a callback, iterates over each of the types related to a model,\ninvoking the callback with the related type's class. Each type will be\nreturned just once, regardless of how many different relationships it has\nwith a model.",
            "itemtype": "method",
            "name": "eachRelatedType",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/ext.js",
            "line": 539,
            "description": "Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.",
            "itemtype": "method",
            "name": "eachRelationship",
            "params": [
                {
                    "name": "callback",
                    "description": "the callback to invoke",
                    "type": "Function"
                },
                {
                    "name": "binding",
                    "description": "the value to which the callback's `this` should be bound",
                    "type": "Any"
                }
            ],
            "class": "DS.Model",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/relationships/has_many.js",
            "line": 7,
            "description": "`DS.hasMany` is used to define One-To-Many and Many-To-Many\nrelationships on a [DS.Model](/api/data/classes/DS.Model.html).\n\n`DS.hasMany` takes an optional hash as a second parameter, currently\nsupported options are:\n\n- `async`: A boolean value used to explicitly declare this to be an async relationship.\n- `inverse`: A string used to identify the inverse property on a related model.\n\n#### One-To-Many\nTo declare a one-to-many relationship between two models, use\n`DS.belongsTo` in combination with `DS.hasMany`, like this:\n\n```javascript\nApp.Post = DS.Model.extend({\n  comments: DS.hasMany('comment')\n});\n\nApp.Comment = DS.Model.extend({\n  post: DS.belongsTo('post')\n});\n```\n\n#### Many-To-Many\nTo declare a many-to-many relationship between two models, use\n`DS.hasMany`:\n\n```javascript\nApp.Post = DS.Model.extend({\n  tags: DS.hasMany('tag')\n});\n\nApp.Tag = DS.Model.extend({\n  posts: DS.hasMany('post')\n});\n```\n\n#### Explicit Inverses\n\nEmber Data will do its best to discover which relationships map to\none another. In the one-to-many code above, for example, Ember Data\ncan figure out that changing the `comments` relationship should update\nthe `post` relationship on the inverse because post is the only\nrelationship to that model.\n\nHowever, sometimes you may have multiple `belongsTo`/`hasManys` for the\nsame type. You can specify which property on the related model is\nthe inverse using `DS.hasMany`'s `inverse` option:\n\n```javascript\nvar belongsTo = DS.belongsTo,\n    hasMany = DS.hasMany;\n\nApp.Comment = DS.Model.extend({\n  onePost: belongsTo('post'),\n  twoPost: belongsTo('post'),\n  redPost: belongsTo('post'),\n  bluePost: belongsTo('post')\n});\n\nApp.Post = DS.Model.extend({\n  comments: hasMany('comment', {\n    inverse: 'redPost'\n  })\n});\n```\n\nYou can also specify an inverse on a `belongsTo`, which works how\nyou'd expect.",
            "itemtype": "method",
            "name": "hasMany",
            "params": [
                {
                    "name": "type",
                    "description": "the model type of the relationship",
                    "type": "String or DS.Model"
                },
                {
                    "name": "options",
                    "description": "a hash of options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "relationship",
                "type": "Ember.computed"
            },
            "class": "DS",
            "module": "ember-data"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 127,
            "description": "If you would like your adapter to use a custom serializer you can\nset the `defaultSerializer` property to be the name of the custom\nserializer.\n\nNote the `defaultSerializer` serializer has a lower priority than\na model specific serializer (i.e. `PostSerializer`) or the\n`application` serializer.\n\n```javascript\nvar DjangoAdapter = DS.Adapter.extend({\n  defaultSerializer: 'django'\n});\n```",
            "itemtype": "property",
            "name": "defaultSerializer",
            "type": "{String}",
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 146,
            "description": "The `find()` method is invoked when the store is asked for a record that\nhas not previously been loaded. In response to `find()` being called, you\nshould query your persistence layer for a record with the given ID. Once\nfound, you can asynchronously call the store's `push()` method to push\nthe record into the store.\n\nHere is an example `find` implementation:\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  find: function(store, type, id) {\n    var url = [type.typeKey, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.getJSON(url).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 180,
            "description": "The `findAll()` method is called when you call `find` on the store\nwithout an ID (i.e. `store.find('post')`).\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  findAll: function(store, type, sinceToken) {\n    var url = type;\n    var query = { since: sinceToken };\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.getJSON(url, query).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findAll",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "sinceToken",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 212,
            "description": "This method is called when you call `find` on the store with a\nquery object as the second parameter (i.e. `store.find('person', {\npage: 1 })`).\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  findQuery: function(store, type, query) {\n    var url = type;\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.getJSON(url, query).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findQuery",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "recordArray",
                    "description": "",
                    "type": "DS.AdapterPopulatedRecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 245,
            "description": "If the globally unique IDs for your records should be generated on the client,\nimplement the `generateIdForRecord()` method. This method will be invoked\neach time you create a new record, and the value returned from it will be\nassigned to the record's `primaryKey`.\n\nMost traditional REST-like HTTP APIs will not use this method. Instead, the ID\nof the record will be set by the server, and your adapter will update the store\nwith the new ID when it calls `didCreateRecord()`. Only implement this method if\nyou intend to generate record IDs on the client-side.\n\nThe `generateIdForRecord()` method will be invoked with the requesting store as\nthe first parameter and the newly created record as the second parameter:\n\n```javascript\ngenerateIdForRecord: function(store, record) {\n  var uuid = App.generateUUIDWithStatisticallyLowOddsOfCollision();\n  return uuid;\n}\n```",
            "itemtype": "method",
            "name": "generateIdForRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "id",
                "type": "String|Number"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 273,
            "description": "Proxies to the serializer's `serialize` method.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  createRecord: function(store, type, record) {\n    var data = this.serialize(record, { includeId: true });\n    var url = type;\n\n    // ...\n  }\n});\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "serialized record",
                "type": "Object"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 298,
            "description": "Implement this method in a subclass to handle the creation of\nnew records.\n\nSerializes the record and send it to the server.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  createRecord: function(store, type, record) {\n    var data = this.serialize(record, { includeId: true });\n    var url = type;\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.ajax({\n        type: 'POST',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 337,
            "description": "Implement this method in a subclass to handle the updating of\na record.\n\nSerializes the record update and send it to the server.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  updateRecord: function(store, type, record) {\n    var data = this.serialize(record, { includeId: true });\n    var id = record.get('id');\n    var url = [type, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.ajax({\n        type: 'PUT',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "updateRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 377,
            "description": "Implement this method in a subclass to handle the deletion of\na record.\n\nSends a delete request for the record to the server.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\n  deleteRecord: function(store, type, record) {\n    var data = this.serialize(record, { includeId: true });\n    var id = record.get('id');\n    var url = [type, id].join('/');\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      jQuery.ajax({\n        type: 'DELETE',\n        url: url,\n        dataType: 'json',\n        data: data\n      }).then(function(data) {\n        Ember.run(null, resolve, data);\n      }, function(jqXHR) {\n        jqXHR.then = null; // tame jQuery's ill mannered promises\n        Ember.run(null, reject, jqXHR);\n      });\n    });\n  }\n});\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the record",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 417,
            "description": "By default the store will try to coalesce all `fetchRecord` calls within the same runloop\ninto as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\nYou can opt out of this behaviour by either not implementing the findMany hook or by setting\ncoalesceFindRequests to false",
            "itemtype": "property",
            "name": "coalesceFindRequests",
            "type": "{boolean}",
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 428,
            "description": "Find multiple records at once if coalesceFindRequests is true",
            "itemtype": "method",
            "name": "findMany",
            "params": [
                {
                    "name": "store",
                    "description": "",
                    "type": "DS.Store"
                },
                {
                    "name": "type",
                    "description": "the DS.Model class of the records",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/adapter.js",
            "line": 439,
            "description": "Organize records into groups, each of which is to be passed to separate\ncalls to `findMany`.\n\nFor example, if your api has nested URLs that depend on the parent, you will\nwant to group records by their parent.\n\nThe default implementation returns the records as a single group.",
            "itemtype": "method",
            "name": "groupRecordsForFindMany",
            "params": [
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "an array of arrays of records, each of which is to be\n                  loaded separately by `findMany`.",
                "type": "Array"
            },
            "class": "DS.Adapter",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/map.js",
            "line": 1,
            "description": "Polyfill Ember.Map behavior for Ember <= 1.7\nThis can probably be removed before 1.0 final",
            "class": "DS.PromiseArray",
            "module": "ember-data"
        },
        {
            "file": "packages/ember-data/lib/system/map.js",
            "line": 36,
            "description": "returns a function that calls the original\ncallback function in the correct order.\nif we are in pre-Ember.1.8 land, Map/MapWithDefault\nforEach calls with key, value, in that order.\n>= 1.8 forEach is called with the order value, key as per\nthe ES6 spec.",
            "class": "DS.PromiseArray",
            "module": "ember-data"
        },
        {
            "file": "packages/ember-data/lib/system/promise_proxies.js",
            "line": 78,
            "description": "A PromiseManyArray is a PromiseArray that also proxies certain method calls\nto the underlying manyArray.\nRight now we proxy:\n  `reload()`",
            "class": "DS.PromiseObject",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 45,
            "description": "This method is invoked whenever data is loaded into the store by the\nadapter or updated by the adapter, or when a record has changed.\n\nIt updates all record arrays that a record belongs to.\n\nTo avoid thrashing, it only runs at most once per run loop.",
            "itemtype": "method",
            "name": "updateRecordArrays",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "clientId",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 104,
            "description": "Update an individual filter.",
            "itemtype": "method",
            "name": "updateRecordArray",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "DS.FilteredRecordArray"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "clientId",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 135,
            "description": "This method is invoked if the `filterFunction` property is\nchanged on a `DS.FilteredRecordArray`.\n\nIt essentially re-runs the filter from scratch. This same\nmethod is invoked when the filter is created in th first place.",
            "itemtype": "method",
            "name": "updateFilter",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 160,
            "description": "Create a `DS.ManyArray` for a type and list of record references, and index\nthe `ManyArray` under each reference. This allows us to efficiently remove\nrecords from `ManyArray`s when they are deleted.",
            "itemtype": "method",
            "name": "createManyArray",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "references",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.ManyArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 185,
            "description": "Create a `DS.RecordArray` for a type and register it for updates.",
            "itemtype": "method",
            "name": "createRecordArray",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.RecordArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 205,
            "description": "Create a `DS.FilteredRecordArray` for a type and register it for updates.",
            "itemtype": "method",
            "name": "createFilteredRecordArray",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "query",
                    "description": "(optional",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.FilteredRecordArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 229,
            "description": "Create a `DS.AdapterPopulatedRecordArray` for a type with given query.",
            "itemtype": "method",
            "name": "createAdapterPopulatedRecordArray",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "query",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.AdapterPopulatedRecordArray"
            },
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/record_array_manager.js",
            "line": 251,
            "description": "Register a RecordArray for a given type to be backed by\na filter function. This will cause the array to update\nautomatically when records of that type change attribute\nvalues or states.",
            "itemtype": "method",
            "name": "registerFilteredRecordArray",
            "params": [
                {
                    "name": "array",
                    "description": "",
                    "type": "DS.RecordArray"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "DS.RecordArrayManager",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 142,
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 158,
            "description": "The adapter to use to communicate to a backend server or other persistence layer.\n\nThis can be specified as an instance, class, or string.\n\nIf you want to specify `App.CustomAdapter` as a string, do:\n\n```js\nadapter: 'custom'\n```",
            "itemtype": "property",
            "name": "adapter",
            "default": "DS.RESTAdapter",
            "type": "{DS.Adapter|String}",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 175,
            "description": "Returns a JSON representation of the record using a custom\ntype-specific serializer, if one exists.\n\nThe available options are:\n\n* `includeId`: `true` if the record's ID should be included in\n  the JSON representation",
            "itemtype": "method",
            "name": "serialize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "the record to serialize",
                    "type": "DS.Model"
                },
                {
                    "name": "options",
                    "description": "an options hash",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 193,
            "description": "This property returns the adapter, after resolving a possible\nstring key.\n\nIf the supplied `adapter` was a class, or a String property\npath resolved to a class, this property will instantiate the\nclass.\n\nThis property is cacheable, so the same instance of a specified\nadapter class should be used for the lifetime of the store.",
            "itemtype": "property",
            "name": "defaultAdapter",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "DS.Adapter"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 230,
            "description": "Create a new record in the current store. The properties passed\nto this method are set on the newly created record.\n\nTo create a new instance of `App.Post`:\n\n```js\nstore.createRecord('post', {\n  title: \"Rails is omakase\"\n});\n```",
            "itemtype": "method",
            "name": "createRecord",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "properties",
                    "description": "a hash of properties to set on the\n  newly created record.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 276,
            "description": "If possible, this method asks the adapter to generate an ID for\na newly created record.",
            "itemtype": "method",
            "name": "_generateId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "if the adapter can generate one, an ID",
                "type": "String"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 299,
            "description": "For symmetry, a record can be deleted via the store.\n\nExample\n\n```javascript\nvar post = store.createRecord('post', {\n  title: \"Rails is omakase\"\n});\n\nstore.deleteRecord(post);\n```",
            "itemtype": "method",
            "name": "deleteRecord",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 319,
            "description": "For symmetry, a record can be unloaded via the store. Only\nnon-dirty records can be unloaded.\n\nExample\n\n```javascript\nstore.find('post', 1).then(function(post) {\n  store.unloadRecord(post);\n});\n```",
            "itemtype": "method",
            "name": "unloadRecord",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 342,
            "description": "This is the main entry point into finding records. The first parameter to\nthis method is the model's name as a string.\n\n---\n\nTo find a record by ID, pass the `id` as the second parameter:\n\n```javascript\nstore.find('person', 1);\n```\n\nThe `find` method will always return a **promise** that will be resolved\nwith the record. If the record was already in the store, the promise will\nbe resolved immediately. Otherwise, the store will ask the adapter's `find`\nmethod to find the necessary data.\n\nThe `find` method will always resolve its promise with the same object for\na given type and `id`.\n\n---\n\nYou can optionally `preload` specific attributes and relationships that you know of\nby passing them as the third argument to find.\n\nFor example, if your Ember route looks like `/posts/1/comments/2` and your API route\nfor the comment also looks like `/posts/1/comments/2` if you want to fetch the comment\nwithout fetching the post you can pass in the post to the `find` call:\n\n```javascript\nstore.find('comment', 2, {post: 1});\n```\n\nIf you have access to the post model you can also pass the model itself:\n\n```javascript\nstore.find('post', 1).then(function (myPostModel) {\n  store.find('comment', 2, {post: myPostModel});\n});\n```\n\nThis way, your adapter's `find` or `buildURL` method will be able to look up the\nrelationship on the record and construct the nested URL without having to first\nfetch the post.\n\n---\n\nTo find all records for a type, call `find` with no additional parameters:\n\n```javascript\nstore.find('person');\n```\n\nThis will ask the adapter's `findAll` method to find the records for the\ngiven type, and return a promise that will be resolved once the server\nreturns the values.\n\n---\n\nTo find a record by a query, call `find` with a hash as the second\nparameter:\n\n```javascript\nstore.find('person', { page: 1 });\n```\n\nThis will ask the adapter's `findQuery` method to find the records for\nthe query, and return a promise that will be resolved once the server\nresponds.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "Object|String|Integer|null"
                },
                {
                    "name": "preload",
                    "description": "- optional set of attributes and relationships passed in either as IDs or as actual models",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 434,
            "description": "This method returns a record for a given type and id combination.",
            "itemtype": "method",
            "name": "findById",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                },
                {
                    "name": "preload",
                    "description": "- optional set of attributes and relationships passed in either as IDs or as actual models",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 469,
            "description": "This method makes a series of requests to the adapter's `find` method\nand returns a promise that resolves once they are all loaded.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "findByIds",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "ids",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 487,
            "description": "This method is called by `findById` if it discovers that a particular\ntype/id pair hasn't been loaded yet to kick off a request to the\nadapter.",
            "itemtype": "method",
            "name": "fetchRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 613,
            "description": "Get a record by a given type and ID without triggering a fetch.\n\nThis method will synchronously return the record if it is available in the store,\notherwise it will return `null`. A record is available if it has been fetched earlier, or\npushed manually into the store.\n\n_Note: This is an synchronous method and does not return a promise._\n\n```js\nvar post = store.getById('post', 1);\n\npost.get('id'); // 1\n```",
            "itemtype": "method",
            "name": "getById",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model|null"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 641,
            "description": "This method is called by the record's `reload` method.\n\nThis method calls the adapter's `find` method, which returns a promise. When\n**that** promise resolves, `reloadRecord` will resolve the promise returned\nby the record's `reload`.",
            "itemtype": "method",
            "name": "reloadRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 665,
            "description": "Returns true if a record for a given type and ID is already loaded.",
            "itemtype": "method",
            "name": "hasRecordForId",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 679,
            "description": "Returns id record for a given type and ID. If one isn't already loaded,\nit builds a new record and leaves it in the `empty` state.",
            "itemtype": "method",
            "name": "recordForId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String|Integer"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 702,
            "itemtype": "method",
            "name": "findMany",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "owner",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "records",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "resolver",
                    "description": "",
                    "type": "Resolver"
                }
            ],
            "return": {
                "description": "records",
                "type": "DS.ManyArray"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 719,
            "description": "If a relationship was originally populated by the adapter as a link\n(as opposed to a list of IDs), this method is called when the\nrelationship is fetched.\n\nThe link (which is usually a URL) is passed through unchanged, so the\nadapter can make whatever request it wants.\n\nThe usual use-case is for the server to register a URL as a link, and\nthen use that URL in the future to make a request for the relationship.",
            "itemtype": "method",
            "name": "findHasMany",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "owner",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "link",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 746,
            "itemtype": "method",
            "name": "findBelongsTo",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "owner",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "link",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "relationship",
                    "description": "",
                    "type": "Relationship"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 763,
            "description": "This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.\n\nExposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.\n\nThis method returns a promise, which is resolved with a `RecordArray`\nonce the server returns.",
            "itemtype": "method",
            "name": "findQuery",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "query",
                    "description": "an opaque query to be used by the adapter",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 793,
            "description": "This method returns an array of all records adapter can find.\nIt triggers the adapter's `findAll` method to give it an opportunity to populate\nthe array with records of that type.",
            "itemtype": "method",
            "name": "findAll",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.AdapterPopulatedRecordArray"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 809,
            "itemtype": "method",
            "name": "fetchAll",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "array",
                    "description": "",
                    "type": "DS.RecordArray"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 828,
            "itemtype": "method",
            "name": "didUpdateAll",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 837,
            "description": "This method returns a filtered array that contains all of the known records\nfor a given type.\n\nNote that because it's just a filter, it will have any locally\ncreated records of the type.\n\nAlso note that multiple calls to `all` for a given type will always\nreturn the same RecordArray.\n\nExample\n\n```javascript\nvar localPosts = store.all('post');\n```",
            "itemtype": "method",
            "name": "all",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.RecordArray"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 871,
            "description": "This method unloads all of the known records for a given type.\n\n```javascript\nstore.unloadAll('post');\n```",
            "itemtype": "method",
            "name": "unloadAll",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 896,
            "description": "Takes a type and filter function, and returns a live RecordArray that\nremains up to date as new records are loaded into the store or created\nlocally.\n\nThe callback function takes a materialized record, and returns true\nif the record should be included in the filter and false if it should\nnot.\n\nThe filter function is called once on all records for the type when\nit is created, and then once on each newly loaded or created record.\n\nIf any of a record's properties change, or if it changes state, the\nfilter function will be invoked again to determine whether it should\nstill be in the array.\n\nOptionally you can pass a query which will be triggered at first. The\nresults returned by the server could then appear in the filter if they\nmatch the filter function.\n\nExample\n\n```javascript\nstore.filter('post', {unread: true}, function(post) {\n  return post.get('unread');\n}).then(function(unreadPosts) {\n  unreadPosts.get('length'); // 5\n  var unreadPost = unreadPosts.objectAt(0);\n  unreadPost.set('unread', false);\n  unreadPosts.get('length'); // 4\n});\n```",
            "itemtype": "method",
            "name": "filter",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "query",
                    "description": "optional query",
                    "type": "Object"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.PromiseArray"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 964,
            "description": "This method returns if a certain record is already loaded\nin the store. Use this function to know beforehand if a find()\nwill result in a request or that it will be a cache hit.\n\n Example\n\n```javascript\nstore.recordIsLoaded('post', 1); // false\nstore.find('post', 1).then(function() {\n  store.recordIsLoaded('post', 1); // true\n});\n```",
            "itemtype": "method",
            "name": "recordIsLoaded",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 988,
            "description": "This method returns the metadata for a specific type.",
            "itemtype": "method",
            "name": "metadataFor",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1004,
            "description": "If the adapter updates attributes or acknowledges creation\nor deletion, the record will notify the store to update its\nmembership in any filters.\nTo avoid thrashing, this method is invoked only once per\n\nrun loop per record.",
            "itemtype": "method",
            "name": "dataWasUpdated",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "Class"
                },
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1025,
            "description": "This method is called by `record.save`, and gets passed a\nresolver for the promise that `record.save` returns.\n\nIt schedules saving to happen at the end of the run loop.",
            "itemtype": "method",
            "name": "scheduleSave",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "resolver",
                    "description": "",
                    "type": "Resolver"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1042,
            "description": "This method is called at the end of the run loop, and\nflushes any records passed into `scheduleSave`",
            "itemtype": "method",
            "name": "flushPendingSave",
            "access": "private",
            "tagname": "",
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1072,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis resolved.\n\nIf the data provides a server-generated ID, it will\nupdate the record and the store's indexes.",
            "itemtype": "method",
            "name": "didSaveRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "the in-flight record",
                    "type": "DS.Model"
                },
                {
                    "name": "data",
                    "description": "optional data (see above)",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1097,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected with a `DS.InvalidError`.",
            "itemtype": "method",
            "name": "recordWasInvalid",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "errors",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1111,
            "description": "This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis rejected (with anything other than a `DS.InvalidError`).",
            "itemtype": "method",
            "name": "recordWasError",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1124,
            "description": "When an adapter's `createRecord`, `updateRecord` or `deleteRecord`\nresolves with data, this method extracts the ID from the supplied\ndata.",
            "itemtype": "method",
            "name": "updateId",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1145,
            "description": "Returns a map of IDs to client IDs for a given type.",
            "itemtype": "method",
            "name": "typeMapFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                }
            ],
            "return": {
                "description": "typeMap",
                "type": "Object"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1178,
            "description": "This internal method is used by `push`.",
            "itemtype": "method",
            "name": "_load",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "partial",
                    "description": "the data should be merged into\n  the existing data, not replace it.",
                    "type": "Boolean"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1198,
            "description": "Returns a model class for a particular key. Used by\nmethods that take a type key (like `find`, `createRecord`,\netc.)",
            "itemtype": "method",
            "name": "modelFor",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                }
            ],
            "return": {
                "description": "",
                "type": "subclass of DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1232,
            "description": "Push some data for a given type into the store.\n\nThis method expects normalized data:\n\n* The ID is a key named `id` (an ID is mandatory)\n* The names of attributes are the ones you used in\n  your model's `DS.attr`s.\n* Your relationships must be:\n  * represented as IDs or Arrays of IDs\n  * represented as model instances\n  * represented as URLs, under the `links` key\n\nFor this model:\n\n```js\nApp.Person = DS.Model.extend({\n  firstName: DS.attr(),\n  lastName: DS.attr(),\n\n  children: DS.hasMany('person')\n});\n```\n\nTo represent the children as IDs:\n\n```js\n{\n  id: 1,\n  firstName: \"Tom\",\n  lastName: \"Dale\",\n  children: [1, 2, 3]\n}\n```\n\nTo represent the children relationship as a URL:\n\n```js\n{\n  id: 1,\n  firstName: \"Tom\",\n  lastName: \"Dale\",\n  links: {\n    children: \"/people/1/children\"\n  }\n}\n```\n\nIf you're streaming data or implementing an adapter,\nmake sure that you have converted the incoming data\ninto this form.\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records.",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the record that was created or\n  updated.",
                "type": "DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1323,
            "description": "Push some raw data into the store.\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records. You\ncan push in more than one type of object at once.\nAll objects should be in the format expected by the\nserializer.\n\n```js\nApp.ApplicationSerializer = DS.ActiveModelSerializer;\n\nvar pushData = {\n  posts: [\n    {id: 1, post_title: \"Great post\", comment_ids: [2]}\n  ],\n  comments: [\n    {id: 2, comment_body: \"Insightful comment\"}\n  ]\n}\n\nstore.pushPayload(pushData);\n```\n\nBy default, the data will be deserialized using a default\nserializer (the application serializer if it exists).\n\nAlternatively, `pushPayload` will accept a model type which\nwill determine which serializer will process the payload.\nHowever, the serializer itself (processing this data via\n`normalizePayload`) will not know which model it is\ndeserializing.\n\n```js\nApp.ApplicationSerializer = DS.ActiveModelSerializer;\nApp.PostSerializer = DS.JSONSerializer;\nstore.pushPayload('comment', pushData); // Will use the ApplicationSerializer\nstore.pushPayload('post', pushData); // Will use the PostSerializer\n```",
            "itemtype": "method",
            "name": "pushPayload",
            "params": [
                {
                    "name": "type",
                    "description": "Optionally, a model used to determine which serializer will be used",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1381,
            "description": "`normalize` converts a json payload into the normalized form that\n[push](#method_push) expects.\n\nExample\n\n```js\nsocket.on('message', function(message) {\n  var modelName = message.model;\n  var data = message.data;\n  store.push(modelName, store.normalize(modelName, data));\n});\n```",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "type",
                    "description": "The name of the model type for this payload",
                    "type": "String"
                },
                {
                    "name": "payload",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The normalized payload",
                "type": "Object"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1406,
            "description": "Update existing records in the store. Unlike [push](#method_push),\nupdate will merge the new data properties with the existing\nproperties. This makes it safe to use with a subset of record\nattributes. This method expects normalized data.\n\n`update` is useful if your app broadcasts partial updates to\nrecords.\n\n```js\nApp.Person = DS.Model.extend({\n  firstName: DS.attr('string'),\n  lastName: DS.attr('string')\n});\n\nstore.get('person', 1).then(function(tom) {\n  tom.get('firstName'); // Tom\n  tom.get('lastName'); // Dale\n\n  var updateEvent = {id: 1, firstName: \"TomHuda\"};\n  store.update('person', updateEvent);\n\n  tom.get('firstName'); // TomHuda\n  tom.get('lastName'); // Dale\n});\n```",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "the record that was updated.",
                "type": "DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1444,
            "description": "If you have an Array of normalized data to push,\nyou can call `pushMany` with the Array, and it will\ncall `push` repeatedly for you.",
            "itemtype": "method",
            "name": "pushMany",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "datas",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1465,
            "description": "If you have some metadata to set for a type\nyou can call `metaForType`.",
            "itemtype": "method",
            "name": "metaForType",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String or subclass of DS.Model"
                },
                {
                    "name": "metadata",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1479,
            "description": "Build a brand new record for a given type, ID, and\ninitial data.",
            "itemtype": "method",
            "name": "buildRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                },
                {
                    "name": "id",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "record",
                "type": "DS.Model"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1524,
            "description": "When a record is destroyed, this un-indexes it and\nremoves it from any record arrays so it can be GCed.",
            "itemtype": "method",
            "name": "dematerializeRecord",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "record",
                    "description": "",
                    "type": "DS.Model"
                }
            ],
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1551,
            "description": "Returns the adapter for a given type.",
            "itemtype": "method",
            "name": "adapterFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "subclass of DS.Model"
                }
            ],
            "return": {
                "description": "DS.Adapter"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1573,
            "description": "Returns an instance of the serializer for a given type. For\nexample, `serializerFor('person')` will return an instance of\n`App.PersonSerializer`.\n\nIf no `App.PersonSerializer` is found, this method will look\nfor an `App.ApplicationSerializer` (the default serializer for\nyour entire application).\n\nIf no `App.ApplicationSerializer` is found, it will fall back\nto an instance of `DS.JSONSerializer`.",
            "itemtype": "method",
            "name": "serializerFor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "the record to serialize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "DS.Serializer"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/system/store.js",
            "line": 1613,
            "description": "All typeKeys are camelCase internally. Changing this function may\nrequire changes to other normalization hooks (such as typeForRoot).",
            "itemtype": "method",
            "name": "_normalizeTypeKey",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "if the adapter can generate one, an ID",
                "type": "String"
            },
            "class": "DS.Store",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/transforms/base.js",
            "line": 36,
            "description": "When given a deserialized value from a record attribute this\nmethod must return the serialized value.\n\nExample\n\n```javascript\nserialize: function(deserialized) {\n  return Ember.isEmpty(deserialized) ? null : Number(deserialized);\n}\n```",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "deserialized",
                    "description": "The deserialized value",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "The serialized value",
                "type": "Mixed"
            },
            "class": "DS.Transform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/transforms/base.js",
            "line": 54,
            "description": "When given a serialize value from a JSON object this method must\nreturn the deserialized value for the record attribute.\n\nExample\n\n```javascript\ndeserialize: function(serialized) {\n  return empty(serialized) ? null : Number(serialized);\n}\n```",
            "itemtype": "method",
            "name": "deserialize",
            "params": [
                {
                    "name": "serialized",
                    "description": "The serialized value",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "The deserialized value",
                "type": "Mixed"
            },
            "class": "DS.Transform",
            "module": "ember-data",
            "namespace": "DS"
        },
        {
            "file": "packages/ember-data/lib/core.js",
            "line": 13,
            "itemtype": "property",
            "name": "VERSION",
            "type": "String",
            "default": "'<%= versionStamp %>'",
            "static": 1,
            "class": "DS",
            "module": "ember-data"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nNeeded because the Ember.computed above does not work (??)",
            "line": " packages/ember-data/lib/serializers/embedded_records_mixin.js:180"
        },
        {
            "message": "Missing item type\nPolyfill Ember.Map behavior for Ember <= 1.7\nThis can probably be removed before 1.0 final",
            "line": " packages/ember-data/lib/system/map.js:1"
        },
        {
            "message": "Missing item type\nreturns a function that calls the original\ncallback function in the correct order.\nif we are in pre-Ember.1.8 land, Map/MapWithDefault\nforEach calls with key, value, in that order.\n>= 1.8 forEach is called with the order value, key as per\nthe ES6 spec.",
            "line": " packages/ember-data/lib/system/map.js:36"
        },
        {
            "message": "Missing item type\nA PromiseManyArray is a PromiseArray that also proxies certain method calls\nto the underlying manyArray.\nRight now we proxy:\n  `reload()`",
            "line": " packages/ember-data/lib/system/promise_proxies.js:78"
        }
    ]
}