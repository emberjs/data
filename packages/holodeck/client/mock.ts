import { getIsRecording, mock } from '.';

export interface Scaffold {
  status: number;
  statusText?: string;
  headers: Record<string, string>;
  body: Record<string, string> | string | null;
  method: string;
  url: string;
  response: Record<string, unknown>;
}

export type ScaffoldGenerator = () => Scaffold;
export type ResponseGenerator = () => Record<string, unknown>;

/**
 * Sets up Mocking for a GET request on the mock server
 * for the supplied url.
 *
 * The response body is generated by the supplied response function.
 *
 * Available options:
 * - status: the status code to return (default: 200)
 * - headers: the headers to return (default: {})
 * - body: the body to match against for the request (default: null)
 * - RECORD: whether to record the request (default: false)
 *
 * @param url the url to mock, relative to the mock server host (e.g. `users/1`)
 * @param response a function which generates the response to return
 * @param options status, headers for the response, body to match against for the request, and whether to record the request
 * @returns
 */
export function GET(
  owner: object,
  url: string,
  response: ResponseGenerator,
  options?: Partial<Omit<Scaffold, 'response' | 'url' | 'method'>> & { RECORD?: boolean }
): Promise<void> {
  return mock(
    owner,
    () => ({
      status: options?.status ?? 200,
      statusText: options?.statusText ?? 'OK',
      headers: options?.headers ?? {},
      body: options?.body ?? null,
      method: 'GET',
      url,
      response: response(),
    }),
    getIsRecording() || (options?.RECORD ?? false)
  );
}
export function POST() {}
export function PUT() {}
export function PATCH() {}
export function DELETE() {}
export function QUERY() {}
