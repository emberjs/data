import { deprecate } from '@ember/debug';

/*
  ## Why does this exist?!?

  `Ember.Map` was a private API provided by Ember (for quite some time).
  Unfortunately, ember-data made `Ember.Map` part of its public API surface via
  documentation blocks.

  `Ember.Map` will be deprecated and removed from Ember "soon"
  (https://github.com/emberjs/rfcs/pull/237) and we would like to confirm that
  Ember Data will work without deprecation before and after that happens.

  `Ember.Map` differs from native `Map` in a few ways:

  * `Ember.Map` has custom `copy` and `isEmpty` methods which are not present in native `Map`
  * `Ember.Map` adds a static `create` method (which simply instantiates itself with `new Ember.Map()`)
  * `Ember.Map` does not accept constructor arguments
  * `Ember.Map` does not have:
    * `@@species`
    * `@@iterator`
    * `entries`
    * `values`

  This implementation adds a deprecated backwards compatibility for:

  * `copy`
  * `isEmpty`

  ## Why is this written this way?!?

  This is needed because `Map` requires instantiation with `new` and by default
  Babel transpilation will do `superConstructor.apply(this, arguments)` which
  throws an error with native `Map`.

  The desired code (if we lived in an "only native class" world) would be:

  ```js
  export default class MapWithDeprecations extends Map {
    constructor(options) {
      super();
      this.defaultValue = options.defaultValue;
    }

    get(key) {
      let hasValue = this.has(key);

      if (hasValue) {
        return super.get(key);
      } else {
        let defaultValue = this.defaultValue(key);
        this.set(key, defaultValue);
        return defaultValue;
      }
    }
  }
  ```
*/
export default class MapWithDeprecations {
  constructor(options) {
    this._map = new Map();
  }

  copy() {
    deprecate(
      'Calling `.copy()` on a map generated by ember-data is deprecated, please migrate to using native Map functionality only.',
       false,
      { id: 'ember-data.map.copy', until: '3.5.0' }
    );

    // can't just pass `this._map` here because IE11 doesn't accept
    // constructor args with its `Map`
    let newMap = new MapWithDeprecations();
    this._map.forEach(function(value, key) {
      newMap.set(key, value)
    });

    return newMap;
  }

  isEmpty() {
    deprecate(
      'Calling `.isEmpty()` on a map generated by ember-data is deprecated, please migrate to using native Map functionality only.',
       false,
      { id: 'ember-data.map.isEmpty', until: '3.5.0' }
    );

    return this.size === 0;
  }

  // proxy all normal Map methods to the underlying Map
  get size() { return this._map.size; }
  clear() { return this._map.clear(...arguments) }
  delete() { return this._map.delete(...arguments) }
  entries() { return this._map.entries(...arguments) }
  forEach() { return this._map.forEach(...arguments) }
  get() { return this._map.get(...arguments) }
  has() { return this._map.has(...arguments) }
  keys() { return this._map.keys(...arguments) }
  set() { return this._map.set(...arguments) }
  values() { return this._map.values(...arguments) }
}
